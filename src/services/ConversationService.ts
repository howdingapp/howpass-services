  import { SupabaseService } from './SupabaseService';
import {
  StartConversationRequest,
} from '../types/conversation';
import { HowanaContext } from '../types/repositories';

export class ConversationService {
  private supabaseService: SupabaseService;

  constructor() {
    // Initialiser le service Supabase
    this.supabaseService = new SupabaseService();
  }

  /**
   * D√©marrer une nouvelle conversation
   */
  async startConversation(request: StartConversationRequest): Promise<{ conversationId: string; context: HowanaContext }> {
    const conversationId = request.conversationId;
    const now = new Date().toISOString();

    console.log('üîç Sauvegarde d\'une nouvelle conversation:', request);
    console.log('üîç Conversation ID:', conversationId);
    console.log('üïê Heure de cr√©ation:', now);
    
    // Cr√©er un contexte par d√©faut
    const context: HowanaContext = {
      type: request.type,
      userData: {
        firstName: '',
        lastName: '',
        age: 0,
        experience: ''
      }
    } as HowanaContext;

    console.log('üîç Conversation context:', context);

    return { conversationId, context };
  }

  /**
   * R√©cup√©rer le contexte d'une conversation depuis Supabase
   */
  async getContext(conversationId: string): Promise<HowanaContext | null> {
    try {
      // Utiliser la fonction getContext de SupabaseService
      const howanaContext = await this.supabaseService.getContext(conversationId);
      
      if (!howanaContext) {
        console.log('‚ö†Ô∏è Contexte Howana non trouv√© pour la conversation:', conversationId);
        return null;
      }


      return howanaContext;
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du contexte:', error);
      return null;
    }
  }

}
