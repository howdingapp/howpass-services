import { BaseChatBotService } from './BaseChatBotService';
import { StartConversationRequest, OpenAIToolsDescription } from '../types/conversation';
import { HowanaContext } from '../types/repositories';
import { IAMessageResponse, ExtractedRecommandations, ChatBotOutputSchema } from '../types/chatbot-output';

export abstract class ReWOOChatbotService<T extends IAMessageResponse> extends BaseChatBotService<T> {
  
  // Constante pour le cycle de rafra√Æchissement du contexte
  private static readonly CONTEXT_REFRESH_CYCLE = 3;
  
  /**
   * D√©marrer une nouvelle conversation avec l'IA
   * Red√©fini pour initialiser toolsCallIn √† 2
   */
  override async startConversation(request: StartConversationRequest): Promise<{
    success: boolean;
    conversationId: string;
    expiresIn: number;
    updatedContext?: HowanaContext;
    error?: string;
  }> {
    try {
      // D√©marrer la conversation via le service local
      const result = await this.conversationService.startConversation(request);

      // Initialiser toolsCallIn dans le contexte
      if (result.context) {
        result.context.metadata = result.context.metadata || {};
        result.context.metadata["toolsCallIn"] = ReWOOChatbotService.CONTEXT_REFRESH_CYCLE;
        console.log(`üîß ReWOO: toolsCallIn initialis√© √† ${ReWOOChatbotService.CONTEXT_REFRESH_CYCLE}`);
      }

      // G√©n√©rer automatiquement une premi√®re r√©ponse IA bas√©e sur le contexte
      try {
        const firstResponseResult = await this.generateFirstResponse(result.context);
        if (firstResponseResult.response) {
          // Utiliser le messageId d'OpenAI si disponible
          const messageId = firstResponseResult.messageId;
          
          // Sauvegarder le messageId d'OpenAI dans le contexte pour les r√©ponses suivantes
          if (messageId) {
            result.context.previousCallId = messageId;
          }
          
          // Mettre √† jour l'entr√©e ai_response pr√©-cr√©√©e
          if (request.aiResponseId) {
            await this.supabaseService.updateAIResponse(request.aiResponseId, {
              response_text: firstResponseResult.response,
              metadata: { 
                source: 'ai', 
                model: this.AI_MODEL, 
                type: 'first_response', 
                messageId: messageId,
                status: 'completed'
              }
            });
            console.log('‚úÖ Entr√©e ai_response mise √† jour avec succ√®s:', request.aiResponseId);
          } else {
            console.warn('‚ö†Ô∏è Aucun aiResponseId fourni pour la premi√®re r√©ponse');
          }
          
        } else {
          console.error('‚ùå Erreur lors de la g√©n√©ration de la premi√®re r√©ponse:', 'R√©ponse vide');
        }
      } catch (aiError) {
        console.error('‚ùå Erreur lors de la g√©n√©ration de la premi√®re r√©ponse:', aiError);
        // Continuer m√™me si l'IA √©choue
      }

      return {
        success: true,
        conversationId: result.conversationId,
        expiresIn: 1800, // 30 minutes par d√©faut
        updatedContext: result.context
      };

    } catch (error) {
      console.error('‚ùå Erreur dans ReWOOChatbotService.startConversation:', error);
      return {
        success: false,
        conversationId: '',
        expiresIn: 0,
        error: 'Erreur interne du service'
      };
    }
  }

  /**
   * G√©n√©rer une r√©ponse IA bas√©e sur le contexte de la conversation
   * Red√©fini pour g√©rer la logique toolsCallIn
   */
  protected override async _generateAIResponse(
    context: HowanaContext, 
    userMessage: string, 
    forceSummaryToolCall: boolean = false, 
    _toolsAllowed: boolean = true, 
    _recursionAllowed: boolean = true, 
    _toolResults?: Array<{ tool_call_id: string; tool_name?: string; output: any }>,
    _useSchemaWithToolResults: boolean = true,
  ): Promise<T> {
    try {
      console.log('üîç ReWOO: G√©n√©ration d\'une nouvelle r√©ponse IA pour la conversation:', context.id);
      console.log('Dernier message de l\'utilisateur:', userMessage);

      // R√©cup√©rer le compteur toolsCallIn depuis le contexte
      const toolsCallIn = context.metadata["toolsCallIn"] != undefined ? context.metadata["toolsCallIn"] : ReWOOChatbotService.CONTEXT_REFRESH_CYCLE;
      console.log(`üîß ReWOO: toolsCallIn actuel: ${toolsCallIn}`);

      // V√©rifier s'il y a un callID dans le contexte pour r√©f√©rencer l'appel pr√©c√©dent
      const previousCallId = context.previousCallId;
      
      if (!previousCallId) {
        throw new Error('Aucun previousCallId trouv√© dans le contexte. Impossible de g√©n√©rer une r√©ponse sans r√©f√©rence √† la conversation pr√©c√©dente.');
      }

      let response:T|null = null;

      // Si toolsCallIn atteint 0, utiliser le comportement sp√©cial
      if (toolsCallIn <= 0) {
        console.log('üîß ReWOO: toolsCallIn atteint 0, utilisation du comportement sp√©cial');
        response = await this.generateResponseWithAllTools(context, userMessage, previousCallId) as T;
      } else {
        // Comportement normal - enrichir le message avec les infos de contexte
        console.log('üîß ReWOO: Utilisation du comportement normal');
        
        // Enrichir le message utilisateur avec les informations de contexte
        const enrichedUserMessage = this.buildEnrichedUserMessageWithContextInfo(userMessage, toolsCallIn);
        
        // Appeler la m√©thode parente avec le message enrichi
        response = await super._generateAIResponse(context, enrichedUserMessage, forceSummaryToolCall, false, false, undefined, false);
      }

      // Mise √† jour unifi√©e du contexte apr√®s r√©cup√©ration de la r√©ponse
      if (response) {

        let updatedContext = context;

        // Mettre √† jour le contexte avec le messageId de la r√©ponse
        updatedContext.previousCallId = response.messageId;
        
        // Mettre √† jour le contexte avant d'appeler la m√©thode parente
        updatedContext.metadata = updatedContext.metadata || {};
        updatedContext.metadata["toolsCallIn"] = ((toolsCallIn - 1) % (ReWOOChatbotService.CONTEXT_REFRESH_CYCLE + 1));
        console.log(`üîß ReWOO: toolsCallIn d√©cr√©ment√© √† ${updatedContext.metadata["toolsCallIn"]}`);
        
        // Mettre √† jour le contexte avec les donn√©es extraites si disponibles
        if (response.extractedData) {
          updatedContext = this.enrichContext(updatedContext, { extractedData: response.extractedData });
        }
        
        response.updatedContext = updatedContext;

        console.log('üîß ReWOO: Contexte mis √† jour');
      
      }

      return response;

    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de la r√©ponse IA:', error);
      throw new Error(`Erreur lors de la g√©n√©ration de la r√©ponse IA: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    }
  }

  /**
   * Comportement sp√©cial quand toolsCallIn atteint 0
   * G√©n√®re les meilleurs param√®tres pour tous les outils disponibles et les ex√©cute
   */
  private async generateResponseWithAllTools(
    context: HowanaContext,
    userMessage: string,
    previousCallId: string
  ): Promise<IAMessageResponse> {
    try {
      console.log('üîß ReWOO: G√©n√©ration de r√©ponse avec outils optimaux');

      // R√©cup√©rer la description des outils disponibles
      const toolsDescription = this.getToolsDescription(context, false, true);
      if (!toolsDescription || toolsDescription.tools.length === 0) {
        console.log('‚ö†Ô∏è ReWOO: Aucun outil disponible, utilisation du comportement normal');
        return await super._generateAIResponse(context, userMessage, false, false, true, undefined, false);
      }

      // Demander √† l'IA de g√©n√©rer les meilleurs param√®tres pour tous les outils
      const optimalParams = await this.generateOptimalToolParameters(context, userMessage, toolsDescription, previousCallId);
      
      if (!optimalParams || optimalParams.length === 0) {
        console.log('‚ö†Ô∏è ReWOO: Aucun param√®tre optimal g√©n√©r√©, utilisation du comportement normal');
        return await super._generateAIResponse(context, userMessage, false, false, true, undefined, false);
      }

      // Ex√©cuter tous les outils en parall√®le avec les param√®tres optimaux
      const { toolResults, extractedData } = await this.executeToolsInParallel(optimalParams, context);

      // Enrichir le message utilisateur avec le contexte des r√©sultats d'outils
      const enrichedUserMessage = this.buildEnrichedUserMessage(userMessage, toolResults, context);

      // Utiliser la m√©thode parente avec le message enrichi et les outils d√©sactiv√©s
      const finalResponse = await super._generateAIResponse(context, enrichedUserMessage, false, false, false, undefined, false);
      
      console.log('üîç ReWOO: R√©ponse finale g√©n√©r√©e avec tous les outils:', finalResponse.response);
      
      // Mise √† jour unifi√©e du contexte (coh√©rente avec generateAIResponse)
      let updatedContext = context;
      
      // Mettre √† jour le contexte avec le messageId de la r√©ponse
      updatedContext.previousCallId = finalResponse.messageId;
      
      // Mettre √† jour le contexte avec les donn√©es extraites si disponibles
      if (extractedData) {
        updatedContext = this.enrichContext(updatedContext, { extractedData });
      }
      
      console.log('üîß ReWOO: Contexte mis √† jour dans generateResponseWithAllTools');
      
      return {
        ...finalResponse,
        extractedData,
        updatedContext,
      } as IAMessageResponse;

    } catch (error) {

      console.error('‚ùå ReWOO: Erreur lors de la g√©n√©ration de r√©ponse avec outils optimaux:', error);
      
      // Fallback vers le comportement normal
      return {
        response: "Je n'ai pas pu g√©n√©rer de r√©ponse.",
        messageId: "",
        updatedContext: context,
      }

    }
  }

  /**
   * Construit un message utilisateur enrichi avec le contexte des r√©sultats d'outils
   */
  private buildEnrichedUserMessage(
    userMessage: string,
    toolResults: Array<{ tool_call_id: string; tool_name?: string; output: any }>,
    context: HowanaContext
  ): string {
    if (toolResults.length === 0) {
      return userMessage;
    }

    // Utiliser la fonction formatToolResultsAsContext de la classe parente
    const contextHints = this.formatToolResultsAsContext(toolResults, context);
    
    return `${userMessage}

${contextHints}

√âvalue ces suggestions avec tact et profondeur. D√©couvre les centres d'int√©r√™t de l'utilisateur et √©voque bri√®vement les √©l√©ments pertinents dans ta conversation, sans recracher les donn√©es brutes.`;
  }

  /**
   * Construit un message utilisateur enrichi avec les informations de contexte ReWOO
   */
  private buildEnrichedUserMessageWithContextInfo(userMessage: string, toolsCallIn: number): string {
    const contextInfo = `Nombre d'√©changes avant rafra√Æchissement: ${toolsCallIn}`;

    return `${userMessage}

${contextInfo}`;
  }

  /**
   * Ex√©cute tous les outils en parall√®le avec les param√®tres optimaux
   */
  private async executeToolsInParallel(
    optimalParams: Array<{ toolName: string; parameters: any }>,
    context: HowanaContext
  ): Promise<{ toolResults: Array<{ tool_call_id: string; tool_name: string; output: any }>; extractedData: ExtractedRecommandations | undefined }> {
    const toolResults = [];
    let extractedData: ExtractedRecommandations | undefined = undefined;

    const toolPromises = optimalParams.map(async (toolParam) => {
      try {
        console.log(`üîß ReWOO: Ex√©cution de l'outil ${toolParam.toolName} avec param√®tres:`, toolParam.parameters);
        
        const toolResult = await this.callTool(toolParam.toolName, toolParam.parameters, context);
        
        // Extraire les donn√©es du r√©sultat de l'outil
        const extracted = this.extractFromToolResult(`${toolParam.toolName}`, toolParam.toolName, toolResult);
        
        return {
          tool_call_id: `${toolParam.toolName}`,
          tool_name: toolParam.toolName,
          output: toolResult,
          extracted: extracted
        };
        
      } catch (toolError) {
        console.error(`‚ùå ReWOO: Erreur lors de l'ex√©cution de l'outil ${toolParam.toolName}:`, toolError);
        return {
          tool_call_id: `${toolParam.toolName}`,
          tool_name: toolParam.toolName,
          output: `Erreur lors de l'ex√©cution de l'outil: ${toolError instanceof Error ? toolError.message : 'Erreur inconnue'}`,
          extracted: null
        };
      }
    });

    // Attendre que tous les outils se terminent
    const toolResultsWithExtracted = await Promise.all(toolPromises);
    
    // Traiter les r√©sultats
    for (const result of toolResultsWithExtracted) {
      toolResults.push({
        tool_call_id: result.tool_call_id,
        tool_name: result.tool_name,
        output: result.output
      });
      
      // Extraire les donn√©es si disponibles
      if (result.extracted && (result.extracted.activities.length > 0 || result.extracted.practices.length > 0)) {
        extractedData = result.extracted;
      }
    }

    return { toolResults, extractedData };
  }

  /**
   * Red√©finit getIaRules pour ajouter la r√®gle de provision de contexte en derni√®re position
   */
  protected override async getIaRules(contextType: string, defaultRules: string[]): Promise<string[]> {
    // Appeler la m√©thode parente pour obtenir les r√®gles de base
    const baseRules = await super.getIaRules(contextType, defaultRules);
    
    // Ajouter la r√®gle sp√©cifique √† ReWOO en derni√®re position
    const contextProvisionRule = `PROVISION DE CONTEXTE:
Tous les ${ReWOOChatbotService.CONTEXT_REFRESH_CYCLE} √©changes, les informations contextuelles sont rafra√Æchies et pourront √™tre utilis√©es pour mieux r√©pondre √† l'utilisateur. Dans l'attente, il faut temporiser en essayant de r√©cup√©rer un maximum d'informations du client pour mieux comprendre ses besoins et ses pr√©f√©rences.`;

    return [...baseRules, contextProvisionRule];
  }


  /**
   * G√©n√®re un sch√©ma de sortie bas√© sur la description des outils disponibles
   */
  private generateToolParametersOutputSchema(toolsDescription: OpenAIToolsDescription): ChatBotOutputSchema {
    // Cr√©er un sch√©ma dynamique o√π chaque outil devient une propri√©t√© de l'objet
    const toolProperties: Record<string, any> = {};
    const requiredTools: string[] = [];
    
    // Construire dynamiquement les propri√©t√©s pour chaque outil
    toolsDescription.tools.forEach(tool => {
      const toolName = tool.description.name;
      toolProperties[toolName] = {
        type: "object",
        description: `Param√®tres optimaux pour l'outil ${toolName}: ${tool.description.description}`,
        properties: tool.description.parameters.properties,
        required: tool.description.parameters.required || [],
        additionalProperties: false
      };
      requiredTools.push(toolName);
    });
    
    return {
      format: {
        type: "json_schema",
        name: "ToolParametersResponse",
        schema: {
          type: "object",
          properties: toolProperties,
          required: requiredTools,
          additionalProperties: false
        },
        strict: true
      }
    };
  }

  /**
   * G√©n√®re les param√®tres optimaux pour tous les outils disponibles
   */
  private async generateOptimalToolParameters(
    context: HowanaContext,
    userMessage: string,
    toolsDescription: OpenAIToolsDescription,
    previousCallId: string
  ): Promise<Array<{ toolName: string; parameters: any }>> {
    try {
      console.log('üîß ReWOO: G√©n√©ration des param√®tres optimaux pour les outils');

      const prompt = `G√©n√®re les MEILLEURS param√®tres pour les outils disponibles en fonction du message utilisateur et du contexte de la conversation.

Message utilisateur: "${userMessage}"
Type de conversation: ${context.type}

Outils disponibles:
${toolsDescription.tools.map(tool => `- ${tool.description.name}: ${tool.description.description}`).join('\n')}

Pour chaque outil pertinent, fournis des param√®tres qui maximiseront la pertinence et l'utilit√© de la r√©ponse. Chaque outil aura sa propre propri√©t√© dans l'objet de r√©ponse avec ses param√®tres sp√©cifiques.`;

      // G√©n√©rer le sch√©ma de sortie bas√© sur toolsDescription
      const outputSchema = this.generateToolParametersOutputSchema(toolsDescription);

      console.log('üîß ReWOO: Sch√©ma de sortie:', JSON.stringify(outputSchema, null, 2));

      const result = await this.openai.responses.create({
        model: this.AI_MODEL,
        previous_response_id: previousCallId,
        input: [
          {
            role: "user",
            content: [{ type: "input_text", text: prompt }],
          }
        ],
        ...(outputSchema && { text: outputSchema })
      });

      const messageOutput = result.output.find(output => output.type === "message");
      if (!messageOutput?.content?.[0]) {
        throw new Error('Aucune r√©ponse g√©n√©r√©e pour les param√®tres optimaux');
      }

      const responseText = (messageOutput.content[0] as any).text;
      console.log('üîß ReWOO: R√©ponse IA pour param√®tres optimaux:', responseText);

      // Parser la r√©ponse JSON structur√©e
      const response = JSON.parse(responseText);
      
      // Convertir la nouvelle structure en format attendu par le reste du code
      const optimalParams: Array<{ toolName: string; parameters: any }> = [];
      
      toolsDescription.tools.forEach(tool => {
        const toolName = tool.description.name;
        if (response[toolName]) {
          optimalParams.push({
            toolName: toolName,
            parameters: response[toolName]
          });
        }
      });

      console.log('üîß ReWOO: Param√®tres optimaux g√©n√©r√©s:', optimalParams);
      return optimalParams;

    } catch (error) {
      console.error('‚ùå ReWOO: Erreur lors de la g√©n√©ration des param√®tres optimaux:', error);
      return [];
    }
  }

}