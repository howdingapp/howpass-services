import { ConversationService } from './ConversationService';
import { SupabaseService } from './SupabaseService';
import { ConversationContext, StartConversationRequest, AddMessageRequest, AIRule } from '../types/conversation';
import OpenAI from 'openai';


const ActivitySummaryJsonOutputSchema = {
  type: "object",
  properties: {
    // Pour ActivityDetailsStep
    shortDescription: {
      type: "string",
      description: "Description courte et accrocheuse de l'activit√©, mettant en avant ce qui la rend unique (max 200 caract√®res)."
    },
    longDescription: {
      type: "string", 
      description: "Description d√©taill√©e de l'activit√© expliquant le d√©roulement, l'approche et ce que vivront les participants (max 500 caract√®res)."
    },
    title: {
      type: "string",
      description: "Titre optimis√© et descriptif de l'activit√© (max 100 caract√®res)."
    },
    
    // Pour ActivityKeywordsStep
    selectedKeywords: {
      type: "array",
      items: { type: "string" },
      description: "Liste des mots-cl√©s les plus pertinents pour cette activit√©."
    },
    
    // Pour ActivitySummaryStep (uniquement benefits)
    benefits: {
      type: "array",
      items: { type: "string" },
      description: "Liste des b√©n√©fices concrets et mesurables que les participants peuvent attendre de cette activit√©."
    },
    
    // Nouveau champ pour d√©crire la situation id√©ale
    typicalSituations: {
      type: "string",
      description: "Description de la situation id√©ale d'un utilisateur qui serait √† m√™me de profiter pleinement de cette pratique. Inclure le profil psychologique, les exp√©riences v√©cues, les besoins sp√©cifiques, etc."
    },

  },
  required: ["shortDescription", "longDescription", "title", "selectedKeywords", "benefits", "typicalSituations"],
  additionalProperties: false
};


export class ChatBotService {
  private conversationService: ConversationService;
  private supabaseService: SupabaseService;
  private openai: OpenAI;
  private AI_MODEL = "gpt-4o-mini";
  private AI_MODEL_QUALITY = "gpt-4o-mini";

  constructor() {
    this.conversationService = new ConversationService();
    this.supabaseService = new SupabaseService();
    
    // Initialiser OpenAI
    this.openai = new OpenAI({
      apiKey: process.env['OPENAI_API_KEY'],
    });
  }

  /**
   * D√©marrer une nouvelle conversation avec l'IA
   */
  async startConversation(request: StartConversationRequest): Promise<{
    success: boolean;
    conversationId: string;
    expiresIn: number;
    context?: ConversationContext;
    error?: string;
  }> {
    try {
      // D√©marrer la conversation via le service local
      const result = await this.conversationService.startConversation({
        ...request,
        initialContext: request.initialContext || {}
      });

      // G√©n√©rer automatiquement une premi√®re r√©ponse IA bas√©e sur le contexte
      try {
        const firstResponseResult = await this.generateFirstResponse(result.context);
        if (firstResponseResult.response) {
          // Utiliser le messageId d'OpenAI si disponible
          const messageId = firstResponseResult.messageId;
          
          // Ajouter le message √† la conversation Redis
          await this.conversationService.addMessage(
            result.conversationId,
            {
              content: firstResponseResult.response,
              type: 'bot',
              metadata: { source: 'ai', model: this.AI_MODEL, type: 'first_response', messageId: messageId }
            }
          );
          
          // Sauvegarder le messageId d'OpenAI dans le contexte pour les r√©ponses suivantes
          if (messageId) {
            result.context.metadata = { ...result.context.metadata, previousCallId: messageId };
          }
          
          // Mettre √† jour l'entr√©e ai_response pr√©-cr√©√©e
          if (request.aiResponseId) {
            await this.supabaseService.updateAIResponse(request.aiResponseId, {
              response_text: firstResponseResult.response,
              metadata: { 
                source: 'ai', 
                model: this.AI_MODEL, 
                type: 'first_response', 
                messageId: messageId,
                status: 'completed'
              }
            });
            console.log('‚úÖ Entr√©e ai_response mise √† jour avec succ√®s:', request.aiResponseId);
          } else {
            console.warn('‚ö†Ô∏è Aucun aiResponseId fourni pour la premi√®re r√©ponse');
          }
          
          // R√©cup√©rer le contexte mis √† jour avec le premier message
          const updatedContext = await this.conversationService.getContext(result.conversationId);
          if (updatedContext) {
            result.context = updatedContext;
          }
        } else {

          console.error('‚ùå Erreur lors de la g√©n√©ration de la premi√®re r√©ponse:', 'R√©ponse vide');

        }
      } catch (aiError) {
        console.error('‚ùå Erreur lors de la g√©n√©ration de la premi√®re r√©ponse:', aiError);
        // Continuer m√™me si l'IA √©choue
      }

      return {
        success: true,
        conversationId: result.conversationId,
        expiresIn: 1800, // 30 minutes par d√©faut
        context: result.context
      };

    } catch (error) {
      console.error('‚ùå Erreur dans ChatBotService.startConversation:', error);
      return {
        success: false,
        conversationId: '',
        expiresIn: 0,
        error: 'Erreur interne du service'
      };
    }
  }

  /**
   * Ajouter un message et obtenir la r√©ponse de l'IA
   */
  async addMessage(
    conversationId: string,
    request: AddMessageRequest
  ): Promise<{
    success: boolean;
    messageId: string;
    context?: ConversationContext;
    error?: string;
  }> {
    try {
      // Ajouter le message utilisateur
      const addResult = await this.conversationService.addMessage(
        conversationId,
        {
          content: request.content,
          type: request.type,
          metadata: request.metadata || {}
        }
      );

      // Si c'est un message utilisateur, appeler l'IA pour obtenir une r√©ponse
      if (request.type === 'user') {
        try {
          // R√©cup√©rer le contexte de la conversation
          const context = await this.conversationService.getContext(conversationId);
          if (context) {
            // G√©n√©rer une r√©ponse IA
            const aiResponse = await this.generateAIResponse(context, request.content);
            
          if (aiResponse) {
              // Ajouter le message √† la conversation Redis
              await this.conversationService.addMessage(
                conversationId,
                {
                  content: aiResponse.response,
                  type: 'bot',
                  metadata: { source: 'ai', model: this.AI_MODEL, messageId: aiResponse.messageId }
                }
              );
              
              // Mettre √† jour l'entr√©e ai_response pr√©-cr√©√©e
              if (request.aiResponseId) {
                await this.supabaseService.updateAIResponse(request.aiResponseId, {
                  response_text: aiResponse.response,
                  metadata: { 
                    source: 'ai', 
                    model: this.AI_MODEL,
                    messageId: aiResponse.messageId,
                    status: 'completed'
                  }
                });
                console.log('‚úÖ Entr√©e ai_response mise √† jour avec succ√®s:', request.aiResponseId);
              } else {
                console.warn('‚ö†Ô∏è Aucun aiResponseId fourni pour la r√©ponse IA');
              }
            }
          }
        } catch (aiError) {
          console.error('‚ùå Erreur lors de l\'appel IA:', aiError);
          // Continuer m√™me si l'IA √©choue
        }
      }

      // R√©cup√©rer le contexte mis √† jour
      const context = await this.conversationService.getContext(conversationId);
      
      return {
        success: true,
        messageId: addResult.messageId,
        ...(context && { context })
      };

    } catch (error) {
      console.error('‚ùå Erreur dans ChatBotService.addMessage:', error);
      return {
        success: false,
        messageId: '',
        error: 'Erreur interne du service'
      };
    }
  }

  /**
   * R√©cup√©rer le contexte d'une conversation
   */
  async getContext(conversationId: string): Promise<{
    success: boolean;
    context?: ConversationContext;
    error?: string;
  }> {
    try {
      const context = await this.conversationService.getContext(conversationId);
      if (!context) {
        return {
          success: false,
          error: 'Conversation not found'
        };
      }
      
      return {
        success: true,
        context
      };
    } catch (error) {
      console.error('‚ùå Erreur dans ChatBotService.getContext:', error);
      return {
        success: false,
        error: 'Erreur interne du service'
      };
    }
  }

  /**
   * G√©n√©rer une r√©ponse IA bas√©e sur le contexte de la conversation
   */
  private async generateAIResponse(context: ConversationContext, userMessage: string): Promise<{ response: string; messageId: string | undefined }> {
    try {
      console.log('üîç G√©n√©ration d\'une nouvelle r√©ponse IA pour la conversation:', context.id);
      console.log('Dernier message de l\'utilisateur:', userMessage);

      // V√©rifier s'il y a un callID dans le contexte pour r√©f√©rencer l'appel pr√©c√©dent
      const previousCallId = context.metadata?.['previousCallId'];
      
      if (!previousCallId) {
        throw new Error('Aucun previousCallId trouv√© dans le contexte. Impossible de g√©n√©rer une r√©ponse sans r√©f√©rence √† la conversation pr√©c√©dente.');
      }

      // Utiliser exclusivement l'API responses pour r√©f√©rencer l'appel pr√©c√©dent
      console.log('üîç Utilisation de l\'API responses avec callID:', previousCallId);
      
      const result = await this.openai.responses.create({
        model: this.AI_MODEL,
        previous_response_id: previousCallId,
        input: [
          {
            role: "user",
            content: [{ type: "input_text", text: userMessage }],
          },
        ],
      });
      const messageId =  result.id

      // R√©cup√©rer le messageId du nouveau r√©sultat de type "message"
      const messageOutput = result.output.find(output => output.type === "message");

      // Extraire le texte de la r√©ponse en g√©rant les types
      let resultText = "Je n'ai pas pu g√©n√©rer de r√©ponse.";
      if (messageOutput?.content?.[0]) {
        const content = messageOutput.content[0];
        if ('text' in content) {
          resultText = content.text;
        }
      }

      if (!resultText || resultText === "Je n'ai pas pu g√©n√©rer de r√©ponse.") {
        throw new Error('Aucune r√©ponse g√©n√©r√©e par l\'API responses');
      }

      console.log('üîç R√©ponse IA via API responses:', resultText);
      console.log('üîç OutputID OpenAI:', messageId);

      return { 
        response: resultText, 
        messageId 
      };

    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de la r√©ponse IA:', error);
      throw new Error(`Erreur lors de la g√©n√©ration de la r√©ponse IA: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    }
  }

  /**
   * G√©n√©rer un r√©sum√© structur√© de la conversation pour les activit√©s
   */
  async generateConversationSummary(context: ConversationContext): Promise<any> {
    try {
      // V√©rifier s'il y a un callID dans le contexte pour r√©f√©rencer l'appel pr√©c√©dent
      const previousCallId = context.metadata?.['previousCallId'];
      
      if(!previousCallId) {
        throw new Error('No previous call ID found');
      }

      if (context.type === 'activity') {
        // Utiliser l'API responses pour r√©f√©rencer l'appel pr√©c√©dent
        console.log('üîç G√©n√©ration du r√©sum√© via API responses avec callID:', previousCallId);
        
        try {
          const systemPrompt = `Tu es un assistant sp√©cialis√© dans l'analyse de conversations entre praticiens et experts. 
          Analyse la conversation et g√©n√®re un r√©sum√© structur√© qui permettra de remplir automatiquement les formulaires d'activit√©.`;

          const conversationText = context.messages
            .map(msg => `${msg.type === 'user' ? 'Utilisateur' : 'Assistant'}: ${msg.content}`)
            .join('\n');

          const result = await this.openai.responses.create({
            model: this.AI_MODEL_QUALITY,
            input: [
              {
                role: "user",
                content: [{ type: "input_text", text: `Analyse cette conversation et g√©n√®re un r√©sum√© structur√©:\n${conversationText}` }],
              },
              {
                type: "message",
                role: "system",
                content: [{ 
                  type: "input_text", 
                  text: systemPrompt
                }],
                status: "completed",
              },
            ],
            text: {
              format: { 
                type: "json_schema",
                name: "ActivitySummary",
                schema: ActivitySummaryJsonOutputSchema,
                strict: true
              }
            }
          });

          const resultText = result.output
            .filter((output) => output.type === "message")
            .map((output) => (output as any).content?.[0]?.text)[0];

          if (resultText) {
            try {
              const parsedSummary = JSON.parse(resultText);
              console.log('üîç R√©sum√© structur√© g√©n√©r√©:', parsedSummary);
              return parsedSummary;
            } catch (parseError) {
              console.warn('‚ö†Ô∏è Erreur de parsing JSON, fallback vers r√©sum√© simple:', parseError);
            }
          }
        } catch (responseError) {
          console.warn('‚ö†Ô∏è Erreur avec l\'API responses, fallback vers chat classique:', responseError);
        }
      }

      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration du r√©sum√©:', error);
      return {
        summary: "R√©sum√© de la conversation g√©n√©r√© automatiquement."
      };
    }
  }

  /**
   * G√©n√©rer une premi√®re r√©ponse IA bas√©e sur le contexte de la conversation
   */
  private async generateFirstResponse(context: ConversationContext): Promise<{ response: string; messageId: string | undefined }> {
    try {

      console.log('üîç G√©n√©ration de la premi√®re r√©ponse IA pour la conversation:', context.id);

      const systemPrompt = this.buildSystemPrompt(context);
      
      let userPrompt = "Salue l'utilisateur et pr√©sente-toi bri√®vement en tant qu'assistant Howana.";
      
      // Personnaliser le prompt selon le type de conversation et les donn√©es disponibles
      if (context.type === 'activity' && context.activityData) {
        userPrompt = `Salue le praticien et pr√©sente-toi en tant qu'assistant Howana sp√©cialis√© dans l'accompagnement des praticiens experts.
        
        Fais un petit √©tat des lieux r√©sum√© de ce qui a √©t√© d√©clar√© :
        - Activit√© : "${context.activityData.title}"
        ${context.activityData.shortDescription ? `- Description : ${context.activityData.shortDescription}` : ''}
        
        Indique que tu es l√† pour l'aider √† compl√©ter et optimiser sa d√©claration d'activit√©.
        
        OBJECTIF SP√âCIFIQUE: Collecter les informations n√©cessaires pour g√©n√©rer automatiquement un r√©sum√© structur√© avec:
        - Titre optimis√©, descriptions (courte et d√©taill√©e), mots-cl√©s, b√©n√©fices, et profil utilisateur id√©al.
        
        Commence par un accueil chaleureux et pose une premi√®re question engageante pour mieux comprendre son activit√© et commencer √† √©tablir la conformit√© avec sa pratique associ√©e.`;
      } else if (context.type === 'bilan') {
        userPrompt = `Salue le praticien et pr√©sente-toi en tant qu'assistant Howana sp√©cialis√© dans l'accompagnement des praticiens experts.
        
        Indique que tu es l√† pour l'aider √† faire un bilan approfondi de son activit√© ou de sa pratique.
        
        Commence par un accueil chaleureux et pose une premi√®re question engageante pour l'accompagner dans cette r√©flexion.`;
      }

      console.log('üîç System prompt:', systemPrompt);
      console.log('üîç G√©n√©ration de la premi√®re r√©ponse IA:', userPrompt);

      // Utiliser l'API responses pour la premi√®re r√©ponse
      const result = await this.openai.responses.create({
        model: this.AI_MODEL,
        input: [
          {
            role: "user",
            content: [{ type: "input_text", text: userPrompt }],
          },
          {
            type: "message",
            role: "system",
            content: [{ 
              type: "input_text", 
              text: systemPrompt
            }],
            status: "completed",
          },
        ],
      });

      // R√©cup√©rer le messageId du premier r√©sultat de type "message"
      const messageOutput = result.output.find(output => output.type === "message");
      const messageId = result.id;
      
      // Extraire le texte de la r√©ponse en g√©rant les types
      let response = "Bonjour ! Je suis Howana, votre assistant personnel sp√©cialis√© dans le bien-√™tre. Comment puis-je vous aider aujourd'hui ?";
      if (messageOutput?.content?.[0]) {
        const content = messageOutput.content[0];
        if ('text' in content) {
          response = content.text;
        }
      }

      console.log('üîç Premi√®re r√©ponse IA via API responses:', response);
      console.log('üîç MessageID OpenAI:', messageId);

      return { 
        response, 
        messageId 
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de la premi√®re r√©ponse:', error);
      return { 
        response: "Bonjour ! Je suis Howana, votre assistant personnel. Comment puis-je vous aider aujourd'hui ?",
        messageId: undefined
      };
    }
  }

  /**
   * Construire le prompt syst√®me bas√© sur le contexte
   */
  private buildSystemPrompt(context: ConversationContext): string {
    let basePrompt = `Tu es Howana, un assistant personnel sp√©cialis√© dans le bien-√™tre et les activit√©s de sant√©. 
    Tu es bienveillant et professionnel.`;

    // R√®gles de comportement et d'information sp√©cifiques √† respecter
    basePrompt += `\n\nR√®gles de comportement et d'information sp√©cifiques √† respecter :`;

    if (context.aiRules && Array.isArray(context.aiRules) && context.aiRules.length > 0) {
      // Filtrer seulement les r√®gles actives
      const activeRules = context.aiRules.filter((rule: AIRule) => rule.isActive);
      
      if (activeRules.length > 0) {
        // Trier les r√®gles par priorit√© (priorit√© √©lev√©e en premier)
        const sortedRules = activeRules.sort((a: AIRule, b: AIRule) => b.priority - a.priority);
        
        sortedRules.forEach((rule: AIRule, index: number) => {
          basePrompt += `\n${index + 1}. [${rule.type.toUpperCase()}] ${rule.name}: ${rule.description}`;
        });
      }
    } else if(context.type === 'activity') {
      // COMPORTEMENT PAR D√âFAUT : Howana experte des pratiques
      basePrompt += `\n1. [EXPERTISE] Expertise des pratiques: Tu es experte des pratiques de bien-√™tre et de sant√©. 
      Ton objectif est d'aider √† valider la coh√©rence entre l'activit√© et la pratique qui lui est associ√©e.
      
      OBJECTIFS SP√âCIFIQUES POUR LE R√âSUM√â STRUCTUR√â:
      Tu dois collecter des informations pr√©cises pour g√©n√©rer automatiquement un r√©sum√© structur√© avec ces 6 √©l√©ments:
      
      A) TITRE (max 100 caract√®res): Un titre optimis√© et descriptif de l'activit√©
      B) DESCRIPTION COURTE (max 200 caract√®res): Description accrocheuse mettant en avant l'unicit√©
      C) DESCRIPTION D√âTAILL√âE (max 500 caract√®res): D√©roulement, approche et exp√©rience des participants
      D) MOTS-CL√âS: Liste des termes les plus pertinents pour cette activit√©
      E) B√âN√âFICES: Liste des b√©n√©fices concrets et mesurables pour les participants
      F) PROFIL ID√âAL: Description du profil psychologique et situation id√©ale de l'utilisateur cible
      
      STRAT√âGIE DE COLLECTE:
      -Tu n'as le droit de poser qu'une seule question ou demade d'information dans chacune de tes r√©ponses pour ne pas surcharger l'utilisateur.
      - Pose des questions cibl√©es pour chaque √©l√©ment
      - Demande des exemples concrets et sp√©cifiques
      - V√©rifie la coh√©rence avec la pratique associ√©e
      - Collecte des d√©tails qui permettront de remplir automatiquement les formulaires`;
    } else /* bilan */ {
       // COMPORTEMENT PAR D√âFAUT : Howana analyste du mood et de l'√©tat du jour
       basePrompt += `\n1. [ANALYSE] Analyse du mood et de l'√©tat du jour: Tu es sp√©cialis√©e dans l'analyse approfondie du bien-√™tre quotidien. 
       Ton objectif est d'aider l'utilisateur √† faire un bilan d√©taill√© de son √©tat du jour et de son mood, 
       en identifiant les points importants que l'analyse statique n'a pas vus.`;
     }

    // Ajouter le contexte de l'activit√© et de la pratique si disponible
    if (context.type === 'activity' && context.activityData) {
      basePrompt += `\n\nINFORMATIONS DE L'ACTIVIT√â (d√©clar√©es par le praticien):
      - Titre: "${context.activityData.title}"`;
      
      if (context.activityData.shortDescription) {
        basePrompt += `\n- Description courte: ${context.activityData.shortDescription}`;
      }
      if (context.activityData.longDescription) {
        basePrompt += `\n- Description d√©taill√©e: ${context.activityData.longDescription}`;
      }

      // Int√©grer les informations de la pratique si disponibles
      if (context.activityData.practice) {
        const practice = context.activityData.practice;
        basePrompt += `\n\nPRATIQUE ASSOCI√âE (r√©f√©rentiel certifi√©):
        - Nom: ${practice.title}
        - Description courte: ${practice.shortDescription || 'Non disponible'}
        - Description d√©taill√©e: ${practice.longDescription || 'Non disponible'}`;
      }
      
      // Ajouter des instructions pour la collecte des informations manquantes
      basePrompt += `\n\nOBJECTIF DE LA CONVERSATION:
      Collecter les informations manquantes pour g√©n√©rer un r√©sum√© structur√© complet.
      V√©rifier et enrichir les informations existantes pour optimiser l'auto-remplissage des formulaires.
      
      POINTS D'ATTENTION:
      - Si des informations sont d√©j√† pr√©sentes, demande des pr√©cisions ou des am√©liorations
      - Si des informations manquent, pose des questions cibl√©es pour les collecter
      - Assure-toi que chaque √©l√©ment du r√©sum√© sera suffisamment d√©taill√© et pr√©cis
      - Le format de sortie doit etre un texte adapt√© √† un chat sur mobile`;
      
    } else if (context.type === 'bilan') {

       if (context.aiRules && Array.isArray(context.aiRules) && context.aiRules.length > 0) {
         basePrompt += `\n\nL'utilisateur fait un bilan de son √©tat du jour et de son mood. Utilise ces informations pour appliquer tes r√®gles personnalis√©es.`;
       } else {
         basePrompt += `\n\nL'utilisateur fait un bilan de son √©tat du jour et de son mood. 
         Aide-le √† approfondir son analyse pour identifier les points importants que l'analyse statique n'a pas vus.`;
       }
    
    }

    // R√®gles g√©n√©rales (toujours pr√©sentes)
    basePrompt += `\n\nR√®gles importantes:
    - R√©ponds toujours en fran√ßais
    - Sois concis mais utile
    - Reste professionnel et bienveillant
    - Si tu ne sais pas quelque chose, dis-le honn√™tement
    - L'√©change doit contenir environ 10 questions maximum
    - Chaque r√©ponse doit TOUJOURS contenir une question pertinente`;
    
    // R√®gles contextuelles sp√©cifiques (uniquement si pas d'aiRules)
    if (!context.aiRules || !Array.isArray(context.aiRules) || context.aiRules.length === 0) {
      if (context.type === 'activity') {
        basePrompt += `
    - Ton objectif principal est d'aider le praticien √† valider la conformit√© de son activit√© avec la pratique associ√©e
    - Pose des questions pertinentes pour mieux comprendre l'activit√© et √©tablir la conformit√©
    - Identifie le profil d'utilisateur id√©al pour cette activit√©/pratique
    - Sugg√®re des ajustements si n√©cessaire pour optimiser la synergie
    
    COLLECTE POUR LE R√âSUM√â STRUCTUR√â:
    - Guide la conversation pour collecter les 6 √©l√©ments requis du r√©sum√©
    - Demande des pr√©cisions sur chaque aspect (titre, descriptions, mots-cl√©s, b√©n√©fices, profil cible)
    - V√©rifie que les informations sont suffisamment d√©taill√©es pour l'auto-remplissage
    - Adapte tes questions selon les informations d√©j√† fournies
    
    - IMPORTANT: L'√©change doit se limiter √† environ 10 questions maximum
    - Chaque r√©ponse doit imp√©rativement contenir une question pour maintenir l'engagement`;
             } else if (context.type === 'bilan') {
         basePrompt += `
     - Aide l'utilisateur √† faire un bilan approfondi de son √©tat du jour et de son mood
     - Identifie les points importants que l'analyse statique n'a pas vus
     - Approfondis pour comprendre les nuances et les d√©tails significatifs
     - IMPORTANT: L'√©change doit se limiter √† environ 10 questions maximum
     - Chaque r√©ponse doit imp√©rativement contenir une question pour maintenir l'engagement`;
       }
    }

    return basePrompt;
  }

  /**
   * Changer le mod√®le IA utilis√© (pour la configuration dynamique)
   */
  setAIModel(model: string): void {
    this.AI_MODEL = model;
    console.log(`ü§ñ Mod√®le IA chang√© vers: ${model}`);
  }

  /**
   * Obtenir le mod√®le IA actuellement utilis√©
   */
  getAIModel(): string {
    return this.AI_MODEL;
  }
}
