import { RecommendationChatBotService } from './RecommendationChatBotService';
import { HowanaBilanContext, HowanaContext } from '../types/repositories';

export class BilanChatBotService extends RecommendationChatBotService {
  
  /**
   * R√®gles par d√©faut pour les bilans
   */
  protected getDefaultBilanRules(): string {
    return `1. [BILAN] Analyse du bilan et accompagnement: Tu es sp√©cialis√©e dans l'analyse des bilans de bien-√™tre 
    et l'accompagnement personnalis√©. Ton objectif est d'aider l'utilisateur √† comprendre son bilan, 
    √† identifier les points d'am√©lioration et √† lui proposer des recommandations HOWPASS adapt√©es.`;
  }

  /**
   * Informations contextuelles du bilan
   */
  protected override getBilanContextInfo(context: any): string {
    if (!context.bilanData) return '';

    return `\n\nL'utilisateur vient de remplir son bilan de bien-√™tre. 
    Aide-le √† comprendre ses r√©sultats, identifie les points d'am√©lioration et propose des recommandations personnalis√©es.`;
  }

  /**
   * Informations contextuelles des conversations pr√©c√©dentes
   */
  protected override getPreviousConversationContext(context: any): string {
    if (!context.lastHowanaRecommandation) return '';

    let previousContext = `\n\nCONTEXTE DES DERNIERS ECHANGES:`;
    
    if (context.lastHowanaRecommandation.userProfile) {
      const profile = context.lastHowanaRecommandation.userProfile;
      if (profile.supposedEmotionalState) {
        previousContext += `\n- √âtat √©motionnel pr√©c√©dent: ${profile.supposedEmotionalState}`;
      }
      if (profile.supposedCurrentNeeds && profile.supposedCurrentNeeds.length > 0) {
        previousContext += `\n- Besoins pr√©c√©dents: ${profile.supposedCurrentNeeds.join(', ')}`;
      }
      if (profile.supposedPreferences && profile.supposedPreferences.length > 0) {
        previousContext += `\n- Pr√©f√©rences pr√©c√©dentes: ${profile.supposedPreferences.join(', ')}`;
      }
      if (profile.supposedConstraints && profile.supposedConstraints.length > 0) {
        previousContext += `\n- Contraintes pr√©c√©dentes: ${profile.supposedConstraints.join(', ')}`;
      }
    }

    if (context.lastHowanaRecommandation.recommendedCategories && context.lastHowanaRecommandation.recommendedCategories.length > 0) {
      const categories = context.lastHowanaRecommandation.recommendedCategories.map((cat: any) => cat.name).join(', ');
      previousContext += `\n- Pratiques recommand√©es pr√©c√©demment: ${categories}`;
    }

    if (context.lastHowanaRecommandation.recommendedActivities && context.lastHowanaRecommandation.recommendedActivities.length > 0) {
      const activities = context.lastHowanaRecommandation.recommendedActivities.map((act: any) => act.name).join(', ');
      previousContext += `\n- Activit√©s recommand√©es pr√©c√©demment: ${activities}`;
    }

    if (context.lastHowanaRecommandation.activitiesReasons) {
      previousContext += `\n- Raisons des activit√©s pr√©c√©dentes: ${context.lastHowanaRecommandation.activitiesReasons}`;
    }

    if (context.lastHowanaRecommandation.practicesReasons) {
      previousContext += `\n- Raisons des pratiques pr√©c√©dentes: ${context.lastHowanaRecommandation.practicesReasons}`;
    }

    if (context.lastHowanaRecommandation.importanteKnowledge && context.lastHowanaRecommandation.importanteKnowledge.length > 0) {
      previousContext += `\n- Connaissances importantes pr√©c√©dentes: ${context.lastHowanaRecommandation.importanteKnowledge.join(', ')}`;
    }

    if (context.lastHowanaRecommandation.top1Recommandation) {
      const top1 = context.lastHowanaRecommandation.top1Recommandation;
      previousContext += `\n- Recommandation prioritaire pr√©c√©dente: ${top1.name} (${top1.type === 'activity' ? 'activit√©' : 'pratique'}) - ${top1.reason}`;
    }

    previousContext += `\n\nUtilise ces informations pour comprendre l'√©volution de l'utilisateur et adapter tes questions. √âvite de r√©p√©ter exactement les m√™mes suggestions.`;

    return previousContext;
  }

  /**
   * Informations d√©taill√©es du bilan
   */
  protected getDetailedBilanInfo(context: HowanaBilanContext & HowanaContext): string {
    if (!context.bilanData) return '';

    let bilanInfo = `\n\nINFORMATIONS DU PRE-BILAN DISPONIBLES:
    - Confort physique: ${context.bilanData.scores.principaux.confortPhysique}/9
    - √âquilibre √©motionnel: ${context.bilanData.scores.principaux.equilibreEmotionnel}/9
    - Qualit√© du sommeil: ${context.bilanData.scores.principaux.qualiteSommeil}/9
    - Niveau d'√©nergie: ${context.bilanData.scores.principaux.niveauEnergie}/9`;
    
    if (context.bilanData.douleurs) {
      bilanInfo += `\n- Douleurs: ${context.bilanData.douleurs}`;
    }
    if (context.bilanData.notesPersonnelles) {
      bilanInfo += `\n- Notes personnelles: ${context.bilanData.notesPersonnelles}`;
    }
    
    bilanInfo += `\n\nNote: Les scores vont de 1 (tr√®s d√©s√©quilibr√©) √† 9 (tr√®s √©quilibr√©). Utilise ces informations pour adapter tes recommandations.
    
    D√âCOUVERTE DE CAT√âGORIES PERSONNALIS√âES:
    - Pose des questions pour identifier d'autres aspects du bien-√™tre importants pour l'utilisateur
    - Demande des scores de 1 √† 9 pour ces nouvelles cat√©gories
    - Exemples: relations sociales, cr√©ativit√©, spiritualit√©, √©quilibre travail-vie, etc.
    - Ces informations enrichiront le bilan et permettront des recommandations plus personnalis√©es.`;

    return bilanInfo;
  }

  /**
   * R√®gles contextuelles sp√©cifiques aux bilans
   */
  protected getBilanSpecificRules(): string {
    return `
    - Analyse les donn√©es du bilan pour comprendre l'√©tat actuel de l'utilisateur
    - Identifie les points d'am√©lioration et les forces
    - Propose des activit√©s et pratiques adapt√©es aux scores du bilan
    - Accompagne l'utilisateur dans la compr√©hension de ses r√©sultats
    - D√âCOUVRE DES SCORES PERSONNALIS√âS: Pose des questions pour identifier d'autres aspects du bien-√™tre non couverts par le bilan standard
    - Demande des scores de 1 √† 9 pour ces nouvelles cat√©gories (1 = tr√®s d√©s√©quilibr√©, 9 = tr√®s √©quilibr√©)
    - IMPORTANT: L'√©change doit se limiter √† environ 10 questions maximum
    - Chaque r√©ponse doit imp√©rativement contenir une question pour maintenir l'engagement`;
  }
  
  protected override async buildSystemPrompt(_context: HowanaContext): Promise<string> {

    const context:HowanaBilanContext & HowanaContext = _context as HowanaBilanContext & HowanaContext;
    
    let basePrompt = `Tu es Howana, un assistant personnel et confident sp√©cialis√© dans le bien-√™tre et les activit√©s de sant√©. 
    Tu es bienveillant.  R√©ponses courtes (maximum 30 mots).`;

    // R√®gles de comportement et d'information sp√©cifiques √† respecter
    basePrompt += `\n\nR√®gles de comportement et d'information sp√©cifiques √† respecter :`;

    // R√àGLE OBLIGATOIRE : Toujours faire r√©f√©rence aux conversations pr√©c√©dentes si disponibles
    if (context.lastHowanaRecommandation || context.bilanData) {
      basePrompt += `\n0. [CONFIANT] Comportement de confident: Tu es comme un confident qui retrouve quelqu'un qu'il conna√Æt bien. 
      Tu DOIS TOUJOURS faire r√©f√©rence aux conversations pr√©c√©dentes, demander des nouvelles, et montrer que tu te souviens 
      de vos √©changes. Cette r√®gle est PRIORITAIRE sur toutes les autres.`;
    }

    basePrompt += await this.getIaRules(context.type, this.getDefaultBilanRules());

    // Ajouter le contexte sp√©cifique au bilan
    basePrompt += this.getBilanContextInfo(context);

    // R√®gles g√©n√©rales (toujours pr√©sentes)
    basePrompt += `\n\n${this.getCommonRules()}`;

    // Ajouter le contexte de la derni√®re recommandation Howana si disponible
    basePrompt += this.getPreviousConversationContext(context);
    
    // R√®gles contextuelles sp√©cifiques
    basePrompt += this.getBilanSpecificRules();

    // Ajouter les informations du bilan si disponibles
    basePrompt += this.getDetailedBilanInfo(context);

    return basePrompt;
  }

  protected override getSummaryOutputSchema(context: HowanaContext): any {
    const constraints = this.getActivitiesAndPracticesConstraints(context);
    const { availableActivityIds, availablePracticeIds, availableActivityNames, availablePracticeNames, allAvailableIds } = constraints;

    console.log(`üìã [BILANS] Contraintes g√©n√©r√©es avec ${availableActivityIds.length} activit√©s et ${availablePracticeIds.length} pratiques:`, {
      availableActivityIds,
      availablePracticeIds,
      availableActivityNames,
      availablePracticeNames,
      allAvailableIds
    });

    return {
      format: { 
        type: "json_schema",
        name: "BilanSummary",
        schema: {
          type: "object",
          properties: {
            userProfile: this.getUserProfileSchemaFragment("Profil utilisateur analys√© √† partir de la conversation de bilan"),
            bilanAnalysis: {
              type: "object",
              properties: {
                scoresAnalysis: {
                  type: "string",
                  description: "Message destin√© √† l'utilisateur analysant vos scores de bilan et identifiant vos points d'am√©lioration (formul√© en vous parlant directement l'un a l'autre)"
                },
                customCategories: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      categoryName: {
                        type: "string",
                        description: "Nom de la cat√©gorie personnalis√©e identifi√©e"
                      },
                      score: {
                        type: "number",
                        description: "Score de 1 √† 9 pour cette cat√©gorie"
                      },
                      description: {
                        type: "string",
                        description: "Message destin√© √† l'utilisateur d√©crivant cette cat√©gorie et pourquoi elle est importante pour vous (formul√© en vous parlant directement l'un a l'autre)"
                      }
                    },
                    required: ["categoryName", "score", "description"],
                    additionalProperties: false
                  },
                  description: "Cat√©gories personnalis√©es identifi√©es lors de votre conversation avec leurs scores"
                }
              },
              required: ["scoresAnalysis", "customCategories"],
              additionalProperties: false
            },
            recommendation: this.getRecommendationSchemaFragment(
              availableActivityIds,
              availableActivityNames,
              availablePracticeIds,
              availablePracticeNames,
              "Recommandation personnalis√©e bas√©e sur l'analyse du bilan de bien-√™tre"
            ),
            importanteKnowledge: {
              type: "array",
              items: { type: "string" },
              description: "Messages destin√©s √† l'utilisateur contenant les points cl√©s √† retenir pour optimiser votre parcours de bien-√™tre (formul√©s en vous parlant directement)"
            }
          },
          required: ["userProfile", "bilanAnalysis", "recommendation", "importanteKnowledge"],
          additionalProperties: false,
          description: `R√©sum√© personnalis√© de votre bilan de bien-√™tre avec recommandations adapt√©es. Les recommandations sont contraintes aux ${allAvailableIds.length} √©l√©ments disponibles dans le contexte.`
        },
        strict: true
      }
    };
  }

  protected override buildFirstUserPrompt(_context: HowanaContext): string {
    const context: HowanaBilanContext & HowanaContext = _context as HowanaBilanContext & HowanaContext;
    
    let prompt = `Salue l'utilisateur et pr√©sente-toi en tant qu'assistant Howana sp√©cialis√© dans l'analyse des bilans de bien-√™tre.
    
    Indique que tu es l√† pour l'aider √† comprendre son bilan, identifier les points d'am√©lioration et lui proposer des recommandations personnalis√©es.`;

    // V√©rifier s'il y a des informations de conversations pr√©c√©dentes
    const hasPreviousContext = context.lastHowanaRecommandation || context.bilanData;
    
    if (hasPreviousContext) {
      prompt += `\n\nIMPORTANT - COMPORTEMENT DE CONFIANT:
      Tu es comme un confident qui retrouve quelqu'un qu'il conna√Æt bien. Tu DOIS absolument:
      - Demander des nouvelles de mani√®re chaleureuse et personnelle
      - Faire r√©f√©rence aux conversations pr√©c√©dentes de mani√®re naturelle
      - Montrer que tu te souviens de vos √©changes pr√©c√©dents
      - Adopter un ton de confident qui s'int√©resse sinc√®rement √† l'√©volution de la personne
      - Ne jamais ignorer ou omettre ces √©l√©ments contextuels`;
    }

    if (context.bilanData) {
      prompt += `\n\nTu as acc√®s √† son bilan de bien-√™tre. Utilise ces informations pour:
      - Faire r√©f√©rence √† ses scores de mani√®re bienveillante et confidente
      - Montrer que tu connais d√©j√† son √©tat de bien-√™tre
      - Adapter ton approche selon les r√©sultats de son bilan
      - Poser des questions cibl√©es bas√©es sur ses scores`;
    }

    if (context.lastHowanaRecommandation) {
      prompt += `\n\nTu as √©galement acc√®s √† nos √©changes pr√©c√©dents. Utilise ces informations pour:
      - Demander des nouvelles des recommandations pr√©c√©dentes
      - Montrer que tu te souviens de ses pr√©f√©rences et besoins pass√©s
      - Adapter ton approche selon l'√©volution de sa situation
      - Cr√©er une continuit√© dans votre relation de confiance`;
    }

    prompt += `\n\nCommence par un accueil chaleureux de confident qui demande des nouvelles, fait r√©f√©rence √† vos √©changes pr√©c√©dents (si disponibles) et pose une premi√®re question engageante pour l'accompagner dans l'analyse de son bilan.`;

    return prompt;
  }

  protected override buildSummarySystemPrompt(_context: HowanaContext): string {
    return `Tu es un assistant sp√©cialis√© dans l'analyse de conversations de bilan de bien-√™tre. 
    Analyse la conversation et g√©n√®re un r√©sum√© structur√© qui permettra de comprendre l'√©tat de l'utilisateur, 
    l'analyse de son bilan et les recommandations propos√©es.
    
    IMPORTANT: Pour l'√©tat √©motionnel et les besoins, analyse-les du point de vue de l'utilisateur en utilisant des formulations comme "Je me sens...", "J'ai besoin de...", "Je ressens...". Cela facilitera le matching s√©mantique avec les activit√©s et pratiques.
    
    Note: Les suggestions de r√©ponses courtes (quickReplies) sont optionnelles et servent √† faciliter l'interaction utilisateur.`;
  }

}
