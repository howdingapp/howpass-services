import { RecommendationChatBotService } from './RecommendationChatBotService';
import { HowanaBilanContext, HowanaContext } from '../types/repositories';
import { ChatBotOutputSchema } from '../types';

export class BilanChatBotService extends RecommendationChatBotService {
  
  /**
   * R√®gles par d√©faut pour les bilans (format tableau)
   */
  protected override getDefaultRules(): string[] {
    return [
      "Tu es Howana, l'assistant exclusif du portail bien-√™tre HOW PASS. Tu es bienveillant et professionnel. R√©ponses courtes (maximum 30 mots).",
      
      "[BILAN] Analyse du bilan et accompagnement: Tu es sp√©cialis√©e dans l'analyse des bilans de bien-√™tre et l'accompagnement personnalis√©. Ton objectif est d'aider l'utilisateur √† comprendre son bilan, √† identifier les points d'am√©lioration et √† lui proposer des recommandations HOWPASS adapt√©es.",
      
      `OBJECTIFS SP√âCIFIQUES:
      - Analyser l'√©tat √©motionnel et les besoins de l'utilisateur
      - Recommander les activit√©s et pratiques HOWPASS les plus pertinentes disponibles sur la plateforme
      - Fournir une analyse d√©taill√©e de l'√©tat de l'utilisateur
      - Donner des suggestions personnalis√©es et adapt√©es`,
      
      `STRAT√âGIE DE RECOMMANDATION:
      - Pose des questions cibl√©es pour comprendre les besoins
      - Analyse les pr√©f√©rences et contraintes de l'utilisateur
      - Propose des activit√©s HOWPASS avec un score de pertinence
      - Explique le raisonnement derri√®re chaque recommandation HOWPASS
      - Adapte tes suggestions selon le profil et l'exp√©rience`,
      
      "Aide l'utilisateur √† identifier ses besoins et ses objectifs, analyse son √©tat √©motionnel et ses pr√©f√©rences, propose des activit√©s et pratiques avec un score de pertinence, explique le raisonnement derri√®re chaque recommandation, adapte tes suggestions selon son profil et son exp√©rience.",
      
      `IMPORTANT - STRAT√âGIE DE CONVERSATION:
      - Ne propose JAMAIS d'activit√©s ou pratiques directement sans avoir d'abord creus√© les besoins de l'utilisateur
      - Pose des questions cibl√©es pour comprendre son √©tat √©motionnel, ses contraintes, ses pr√©f√©rences
      - √âcoute attentivement ses r√©ponses avant de sugg√©rer quoi que ce soit
      - L'objectif est de cr√©er une vraie conversation, pas de donner des r√©ponses toutes faites
      - Propose des activit√©s/pratiques seulement apr√®s avoir bien compris ses besoins sp√©cifiques`,
      
      "IMPORTANT: L'√©change doit se limiter √† environ 10 questions maximum, chaque r√©ponse doit imp√©rativement contenir une question pour maintenir l'engagement.",
      
      "STRAT√âGIE: Commence par des questions ouvertes sur son √©tat actuel, ses d√©fis, ses envies, ne propose des activit√©s/pratiques qu'apr√®s avoir bien cern√© ses besoins sp√©cifiques.",
      
      "CRUCIAL: Ne propose des activit√©s/pratiques qu'apr√®s avoir pos√© au moins 3 questions pour comprendre les vrais besoins.",
      
      "L'utilisateur vient de remplir son bilan de bien-√™tre. Aide-le √† comprendre ses r√©sultats, identifie les points d'am√©lioration et propose des recommandations personnalis√©es sur la plateforme HOW PASS.",
      
      `Utilisation des outils:
      - Utilise l'outil 'faq_search' UNIQUEMENT pour des questions informationnelles relevant des th√®mes suivants: stress, anxi√©t√©, m√©ditation, sommeil, concentration, √©quilibre √©motionnel, confiance en soi, d√©butants (pratiques/activit√©s), parrainage, ambassadeur Howana, Aper'How bien-√™tre (d√©finition, participation, organisation, types de pratiques)
      - Pour toute autre question (y compris compte/connexion, abonnement/prix, s√©curit√©/donn√©es, support/bugs), ne pas utiliser 'faq_search'
      - Si la question concerne des recommandations personnalis√©es d'activit√©s/pratiques, utilise 'activities_and_practices'`
    ];
  }

  /**
   * Fonction centralis√©e pour toutes les informations de contexte syst√®me
   */
  protected override async getSystemContext(context: any): Promise<string> {
    let contextInfo = '';

    // Contexte du bilan
    contextInfo += this.getDetailedBilanInfo(context);
    
    contextInfo += this.getLastBilanContextInfo(context);

    // Contexte de la derni√®re recommandation Howana
    contextInfo += this.getPreviousConversationContext(context as any);

    // Ajouter les pratiques HOW PASS existantes
    contextInfo += (await this.getAvailablePracticesContext());

    return contextInfo;
  }

  /**
   * Informations d√©taill√©es du bilan
   */
  protected getDetailedBilanInfo(context: HowanaBilanContext & HowanaContext): string {
    if (!context.bilanData) return '';

    let bilanInfo = `\n\nINFORMATIONS DU PRE-BILAN DISPONIBLES:
    - Confort physique: ${context.bilanData.scores.principaux.confortPhysique}/9
    - √âquilibre √©motionnel: ${context.bilanData.scores.principaux.equilibreEmotionnel}/9
    - Qualit√© du sommeil: ${context.bilanData.scores.principaux.qualiteSommeil}/9
    - Niveau d'√©nergie: ${context.bilanData.scores.principaux.niveauEnergie}/9`;
    
    if (context.bilanData.douleurs) {
      bilanInfo += `\n- Douleurs: ${context.bilanData.douleurs}`;
    }
    
    return bilanInfo;
  
  }

  protected override getSummaryOutputSchema(context: HowanaContext): any {
    const constraints = this.getActivitiesAndPracticesConstraints(context);
    const { availableActivityIds, availablePracticeIds, availableActivityNames, availablePracticeNames, allAvailableIds } = constraints;

    console.log(`üìã [BILANS] Contraintes g√©n√©r√©es avec ${availableActivityIds.length} activit√©s et ${availablePracticeIds.length} pratiques:`, {
      availableActivityIds,
      availablePracticeIds,
      availableActivityNames,
      availablePracticeNames,
      allAvailableIds
    });

    return {
      format: { 
        type: "json_schema",
        name: "BilanSummary",
        schema: {
          type: "object",
          properties: {
            userProfile: this.getUserProfileSchemaFragment("Profil utilisateur analys√© √† partir de la conversation de bilan"),
            bilanAnalysis: {
              type: "object",
              properties: {
                scoresAnalysis: {
                  type: "string",
                  description: "Message destin√© √† l'utilisateur analysant vos scores de bilan et identifiant vos points d'am√©lioration (formul√© en vous parlant directement l'un a l'autre)"
                },
                customCategories: {
                  type: "array",
                  items: {
                    type: "object",
                    properties: {
                      categoryKey: {
                        type: "string",
                        description: "Identifiant unique de la cat√©gorie personnalis√©e"
                      },
                      categoryName: {
                        type: "string",
                        description: "Nom de la cat√©gorie personnalis√©e identifi√©e"
                      },
                      score: {
                        type: "number",
                        description: "Score de 1 √† 9 pour cette cat√©gorie"
                      },
                      description: {
                        type: "string",
                        description: "Message destin√© √† l'utilisateur d√©crivant cette cat√©gorie et pourquoi elle est importante pour vous (formul√© en vous parlant directement l'un a l'autre)"
                      }
                    },
                    required: ["categoryKey", "categoryName", "score", "description"],
                    additionalProperties: false
                  },
                  description: "Cat√©gories personnalis√©es identifi√©es lors de votre conversation avec leurs scores. Soit le score a √©t√© explicitement donn√© par l'utilisateur, soit analys√© √† partir de l'√©change"
                }
              },
              required: ["scoresAnalysis", "customCategories"],
              additionalProperties: false
            },
            recommendation: this.getRecommendationSchemaFragment(
              availableActivityIds,
              availableActivityNames,
              availablePracticeIds,
              availablePracticeNames,
              "Recommandation personnalis√©e bas√©e sur l'analyse du bilan de bien-√™tre"
            ),
            importanteKnowledge: {
              type: "array",
              items: { type: "string" },
              description: "Messages destin√©s √† l'utilisateur contenant les points cl√©s √† retenir pour optimiser votre parcours de bien-√™tre (formul√©s en vous parlant directement)"
            }
          },
          required: ["userProfile", "bilanAnalysis", "recommendation", "importanteKnowledge"],
          additionalProperties: false,
          description: `R√©sum√© personnalis√© de votre bilan de bien-√™tre avec recommandations adapt√©es. Les recommandations sont contraintes aux ${allAvailableIds.length} √©l√©ments disponibles dans le contexte.`
        },
        strict: true
      }
    };
  }

  protected override buildFirstUserPrompt(_context: HowanaContext): string {
    const context: HowanaBilanContext & HowanaContext = _context as HowanaBilanContext & HowanaContext;
    const hasPreviousContext = context.lastHowanaRecommandation || context.bilanData;
    
    let prompt = hasPreviousContext 
      ? `Dis bonjour et fais r√©f√©rence au contexte pr√©c√©dent pour personnaliser ta premi√®re r√©ponse.`
      : `Salue l'utilisateur et pr√©sente-toi en tant qu'assistant Howana sp√©cialis√© dans l'analyse des bilans de bien-√™tre. Indique que tu es l√† pour l'aider √† comprendre son bilan et identifier les points d'am√©lioration.`;

    prompt += `\n\nCommence par un accueil chaleureux et pose une question engageante pour l'accompagner dans l'analyse de son bilan.`;

    return prompt;
  }

   /**
   * D√©termine le sch√©ma de sortie appropri√© selon l'outil utilis√©
   */
   protected override getSchemaByUsedTool(_toolName: string, context: HowanaContext, forceSummaryToolCall:boolean = false): ChatBotOutputSchema {
      return this.getAddMessageOutputSchema(context, forceSummaryToolCall);
   }
}
