import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import { spawn } from 'child_process';
import { VideoController } from './controllers/VideoController';
import conversationRoutes from './routes/conversationRoutes';
import iaJobsRoutes from './routes/iaJobsRoutes';
import { redisService } from './services/RedisService';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

const app = express();
const port = process.env['PORT'] || 3000;

// V√©rifier que FFmpeg est disponible
function checkFFmpeg(): Promise<boolean> {
  return new Promise((resolve) => {
    const ffmpeg = spawn('ffmpeg', ['-version']);
    
    ffmpeg.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ FFmpeg est disponible');
        resolve(true);
      } else {
        console.error('‚ùå FFmpeg n\'est pas disponible');
        resolve(false);
      }
    });
    
    ffmpeg.on('error', (err) => {
      console.error('‚ùå Erreur lors de la v√©rification de FFmpeg:', err);
      resolve(false);
    });
  });
}

// V√©rifier que Redis est disponible et d√©marrer le serveur
async function checkRedisAndStartServer(): Promise<void> {
  return new Promise((resolve, reject) => {
    if (redisService.isRedisConnected()) {
      // Redis est d√©j√† connect√©
      console.log('‚úÖ Redis d√©j√† connect√©, d√©marrage imm√©diat du serveur...');
      setupRedisEventHandlers();
      startExpressServer();
      resolve();
      return;
    }

    console.log('‚è≥ En attente de la connexion Redis...');
    
    // ‚úÖ √âcouter l'√©v√©nement 'connected' de Redis
    const redisClient = redisService.getClient();
    redisClient.once('connected', () => {
      console.log('üîå Redis connect√© ! D√©marrage du serveur...');
      
      // ‚úÖ Configurer les √©v√©nements Redis une fois connect√©
      setupRedisEventHandlers();
      
      // ‚úÖ D√©marrer le serveur Express dans le callback Redis
      startExpressServer();
      
      resolve();
    });

    // Timeout de s√©curit√© (30 secondes)
    setTimeout(() => {
      if (!redisService.isRedisConnected()) {
        console.error('‚ùå Timeout: Redis n\'a pas pu se connecter en 30 secondes');
        reject(new Error('Redis connection timeout'));
      }
    }, 30000);
  });
}

// Middleware
app.use(helmet());
app.use(compression());
app.use(cors({
  origin: process.env['CORS_ORIGIN'] || '*',
  credentials: true
}));
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Routes
const videoController = new VideoController();

// Routes vid√©o
app.post('/webhook/database', (req, res) => {
  videoController.handleDatabaseWebhook(req, res);
});

app.get('/job/:executionName', (req, res) => {
  videoController.getJobStatus(req, res);
});

app.get('/health', (req, res) => {
  videoController.getHealth(req, res);
});

// ‚úÖ Endpoint de sant√© Redis (disponible une fois Redis initialis√©)
app.get('/health/redis', async (_req, res) => {
  try {
    const isConnected = redisService.isRedisConnected();
    const isHealthy = isConnected ? await redisService.healthCheck() : false;
    
    if (isConnected && isHealthy) {
      res.json({
        status: 'healthy',
        service: 'redis',
        timestamp: new Date().toISOString(),
        host: process.env['REDIS_HOST'] || 'localhost',
        port: process.env['REDIS_PORT'] || '6379',
        connection: 'connected',
        health: 'healthy'
      });
    } else if (isConnected && !isHealthy) {
      res.status(503).json({
        status: 'degraded',
        service: 'redis',
        timestamp: new Date().toISOString(),
        host: process.env['REDIS_HOST'] || 'localhost',
        port: process.env['REDIS_PORT'] || '6379',
        connection: 'connected',
        health: 'unhealthy',
        error: 'Redis health check failed'
      });
    } else {
      res.status(503).json({
        status: 'unhealthy',
        service: 'redis',
        timestamp: new Date().toISOString(),
        host: process.env['REDIS_HOST'] || 'localhost',
        port: process.env['REDIS_PORT'] || '6379',
        connection: 'disconnected',
        health: 'unknown',
        error: 'Redis not connected'
      });
    }
  } catch (error) {
    res.status(503).json({
      status: 'error',
      service: 'redis',
      timestamp: new Date().toISOString(),
      error: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Routes des conversations
app.use('/api/conversations', conversationRoutes);

// Routes des jobs IA
app.use('/api/ia/jobs', iaJobsRoutes);

// D√©marrage du serveur Express
function startExpressServer(): void {
  app.listen(port, () => {
    console.log(`üöÄ Serveur d√©marr√© sur le port ${port}`);
    console.log(`üìä Environnement: ${process.env['NODE_ENV']}`);
    console.log(`üé¨ FFmpeg threads: ${process.env['FFMPEG_THREADS'] || 4}`);
    console.log(`‚è±Ô∏è FFmpeg timeout: ${process.env['FFMPEG_TIMEOUT'] || 300000}ms`);
    console.log(`‚òÅÔ∏è GCP Project ID: ${process.env['GCP_PROJECT_ID'] || 'Non d√©fini'}`);
    console.log(`üìã GCP Job: ${process.env['GCP_JOB_NAME'] || 'video-processing-job'}`);
    console.log(`üî¥ Redis: ${process.env['REDIS_HOST'] || 'localhost'}:${process.env['REDIS_PORT'] || '6379'}`);
  });
}

// D√©marrage du serveur principal
async function startServer() {
  try {
    // V√©rifier FFmpeg avant de d√©marrer
    const ffmpegAvailable = await checkFFmpeg();
    if (!ffmpegAvailable) {
      console.error('‚ùå Le service ne peut pas d√©marrer sans FFmpeg');
      process.exit(1);
    }

    // ‚úÖ Attendre Redis ET d√©marrer le serveur dans le callback
    await checkRedisAndStartServer();
    
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage du serveur:', error);
    process.exit(1);
  }
}

/**
 * Configurer les gestionnaires d'√©v√©nements Redis pour le monitoring en continu
 */
function setupRedisEventHandlers(): void {
  const redisClient = redisService.getClient();
  
  // ‚úÖ √âcouter la d√©connexion Redis
  redisClient.on('disconnected', () => {
    console.warn('‚ö†Ô∏è Redis d√©connect√© - Le serveur reste actif mais certaines fonctionnalit√©s peuvent √™tre limit√©es');
  });

  // ‚úÖ √âcouter la reconnexion Redis
  redisClient.on('connected', () => {
    console.log('üîå Redis reconnect√© - Toutes les fonctionnalit√©s sont √† nouveau disponibles');
  });

  // ‚úÖ √âcouter les erreurs Redis
  redisClient.on('error', (error) => {
    console.error('‚ùå Erreur Redis:', error);
  });

  // ‚úÖ √âcouter la fin de la connexion
  redisClient.on('end', () => {
    console.warn('üîå Connexion Redis ferm√©e');
  });

  // ‚úÖ √âcouter la fermeture de la connexion
  redisClient.on('close', () => {
    console.warn('üîå Connexion Redis ferm√©e (close)');
  });

  console.log('‚úÖ Gestionnaires d\'√©v√©nements Redis configur√©s pour le monitoring en continu');
}

startServer();

// Gestion de l'arr√™t gracieux
process.on('SIGTERM', async () => {
  console.log('üõë Signal SIGTERM re√ßu, arr√™t gracieux...');
  await redisService.disconnect();
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('üõë Signal SIGINT re√ßu, arr√™t gracieux...');
  await redisService.disconnect();
  process.exit(0);
});

// Gestion des erreurs non captur√©es
process.on('uncaughtException', (error) => {
  console.error('‚ùå Erreur non captur√©e:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, _promise) => {
  console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
  process.exit(1);
}); 