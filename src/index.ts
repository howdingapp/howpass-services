import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import { spawn } from 'child_process';
import { VideoController } from './controllers/VideoController';
import conversationRoutes from './routes/conversationRoutes';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

const app = express();
const port = process.env['PORT'] || 3000;

// V√©rifier que FFmpeg est disponible
function checkFFmpeg(): Promise<boolean> {
  return new Promise((resolve) => {
    const ffmpeg = spawn('ffmpeg', ['-version']);
    
    ffmpeg.on('close', (code) => {
      if (code === 0) {
        console.log('‚úÖ FFmpeg est disponible');
        resolve(true);
      } else {
        console.error('‚ùå FFmpeg n\'est pas disponible');
        resolve(false);
      }
    });
    
    ffmpeg.on('error', (err) => {
      console.error('‚ùå Erreur lors de la v√©rification de FFmpeg:', err);
      resolve(false);
    });
  });
}

// Middleware
app.use(helmet());
app.use(compression());
app.use(cors({
  origin: process.env['CORS_ORIGIN'] || '*',
  credentials: true
}));
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Routes
const videoController = new VideoController();

// Routes vid√©o
app.post('/webhook/database', (req, res) => {
  videoController.handleDatabaseWebhook(req, res);
});

app.get('/job/:executionName', (req, res) => {
  videoController.getJobStatus(req, res);
});

app.get('/health', (req, res) => {
  videoController.getHealth(req, res);
});

// Routes des conversations
app.use('/api/conversations', conversationRoutes);

// D√©marrage du serveur
async function startServer() {
  try {
    // V√©rifier FFmpeg avant de d√©marrer
    const ffmpegAvailable = await checkFFmpeg();
    if (!ffmpegAvailable) {
      console.error('‚ùå Le service ne peut pas d√©marrer sans FFmpeg');
      process.exit(1);
    }

    app.listen(port, () => {
      console.log(`üöÄ Serveur d√©marr√© sur le port ${port}`);
      console.log(`üìä Environnement: ${process.env['NODE_ENV']}`);
      console.log(`üé¨ FFmpeg threads: ${process.env['FFMPEG_THREADS'] || 4}`);
      console.log(`‚è±Ô∏è FFmpeg timeout: ${process.env['FFMPEG_TIMEOUT'] || 300000}ms`);
      console.log(`‚òÅÔ∏è GCP Project ID: ${process.env['GCP_PROJECT_ID'] || 'Non d√©fini'}`);
      console.log(`üìã GCP Job: ${process.env['GCP_JOB_NAME'] || 'video-processing-job'}`);
    });
  } catch (error) {
    console.error('‚ùå Erreur lors du d√©marrage du serveur:', error);
    process.exit(1);
  }
}

startServer();

// Gestion de l'arr√™t gracieux
process.on('SIGTERM', () => {
  console.log('üõë Signal SIGTERM re√ßu, arr√™t gracieux...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üõë Signal SIGINT re√ßu, arr√™t gracieux...');
  process.exit(0);
});

// Gestion des erreurs non captur√©es
process.on('uncaughtException', (error) => {
  console.error('‚ùå Erreur non captur√©e:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, _promise) => {
  console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
  process.exit(1);
}); 