import { Request, Response } from 'express';
import { MergeWithFullSoundRequest } from '../services/VideoService';
import { CloudRunJobsService, JobPayload } from '../services/CloudRunJobsService';
import { SupabaseService } from '../services/SupabaseService';

interface DatabaseWebhookPayload {
  type: string;
  table: string;
  record: any;
  old_record?: any;
}

export class VideoController {
  private cloudRunJobsService: CloudRunJobsService;
  private supabaseService: SupabaseService;

  constructor() {
    this.cloudRunJobsService = new CloudRunJobsService();
    this.supabaseService = new SupabaseService();
  }

  async handleDatabaseWebhook(req: Request, res: Response): Promise<void> {
    try {
      const payload: DatabaseWebhookPayload = req.body;
      const { type, table, record } = payload;

      console.log('üìä Webhook de base de donn√©es re√ßu:', {
        type,
        table,
        recordId: record?.id,
        hasPresentationVideo: !!record?.presentation_video_public_url
      });

      // V√©rifier le type d'op√©ration
      if (type !== 'INSERT' && type !== 'UPDATE') {
        console.log('‚è≠Ô∏è Type d\'op√©ration ignor√©:', type);
        res.status(200).json({
          success: true,
          message: 'Type d\'op√©ration ignor√©'
        });
        return;
      }

      // V√©rifier la table
      if (table !== 'categories' && table !== 'practices') {
        console.log('‚è≠Ô∏è Table ignor√©e:', table);
        res.status(200).json({
          success: true,
          message: 'Table ignor√©e'
        });
        return;
      }

      // V√©rifier les statuts des champs QR code
      const qrCodeVideoStatus = record?.qr_code_presentation_video_public_url;
      const qrCodeLessVideoStatus = record?.qr_code_less_presentation_video_public_url;

      // Si aucun champ n'est en 'to_compute', faire un retour imm√©diat
      if (qrCodeVideoStatus !== 'to_compute' && qrCodeLessVideoStatus !== 'to_compute') {
              
        console.log('‚è≠Ô∏è Aucun champ en attente de calcul, webhook ignor√©:', {
          table,
          recordId: record.id,
          qrCodeVideoStatus,
          qrCodeLessVideoStatus
        });
        console.log("record => ", JSON.stringify(record, null, 2));

        res.status(200).json({
          success: true,
          message: 'Vid√©os g√©n√©r√©es ou en cours de g√©n√©ration'
        });
        return;
      }

      // V√©rifier que le record contient une vid√©o de pr√©sentation
      if (!record?.presentation_video_public_url) {
        console.log('‚ö†Ô∏è Aucune vid√©o de pr√©sentation trouv√©e mais champs QR code en to_compute, passage √† null');
        
        // Mettre √† jour les champs QR code vers null
        const updates: any = {};
        if (qrCodeVideoStatus === 'to_compute') {
          updates['qr_code_presentation_video_public_url'] = null;
        }
        if (qrCodeLessVideoStatus === 'to_compute') {
          updates['qr_code_less_presentation_video_public_url'] = null;
        }

        // Mettre √† jour la base de donn√©es via le service
        const updateSuccess = await this.supabaseService.updateRecord(table, record.id, updates);

        if (!updateSuccess) {
          res.status(500).json({
            success: false,
            error: 'Erreur lors de la mise √† jour des champs QR code'
          });
          return;
        }
        res.status(200).json({
          success: true,
          message: 'Champs QR code mis √† jour vers null (pas de vid√©o de pr√©sentation)',
          updates
        });
        return;
      }
      
      // Si au moins un champ est en 'to_compute', continuer le traitement
      console.log('üîÑ Champs en attente de calcul d√©tect√©s:', {
        table,
        recordId: record.id,
        qrCodeVideoStatus,
        qrCodeLessVideoStatus
      });

      // Utiliser la vid√©o avec son complet
      const prefixVideoWithFullSound = 'qr_codes/qr_code_scene_start_and_sound.mp4';

      // Construire l'URL de la vid√©o postfix depuis Supabase
      // Utiliser default_presentation_video_public_url si presentation_video_public_url n'est pas renseign√©e
      const postfixVideoUrl = record.presentation_video_public_url || record.default_presentation_video_public_url;

      console.log('üé¨ Pr√©paration de la fusion avec son complet:', {
        table,
        recordId: record.id,
        prefixVideoWithFullSound,
        postfixVideoUrl,
        videoDuration: 16, // 16 secondes de contenu
        qrCodeLessStart: 6  // QR Code Less commence √† 6s
      });

      const mergeRequest: MergeWithFullSoundRequest = {
        type: 'fullsound',
        prefixVideoWithFullSound,
        postfixVideoUrl,
        videoDuration: 16, // 16 secondes de contenu dans la vid√©o prefix
        qrCodeLessStart: 6, // QR Code Less commence √† 6 secondes
        quality: 'high', // Qualit√© par d√©faut
        fps: 30, // FPS par d√©faut
        metadata: {
          table,
          recordId: record.id,
          operation: type
        }
      };

      // Cr√©er un job Cloud Run pour le traitement en arri√®re-plan
      const jobPayload: JobPayload = {
        mergeRequest,
        table,
        recordId: record.id
      };

      const jobName = await this.cloudRunJobsService.createVideoProcessingJob(jobPayload);

      // Retourner imm√©diatement pour indiquer que le webhook est accept√©
      res.status(200).json({
        success: true,
        message: 'Webhook accept√©, job de fusion cr√©√©',
        jobName,
        metadata: {
          table,
          recordId: record.id,
          operation: type
        }
      });

    } catch (error) {
      console.error('‚ùå Erreur lors du traitement du webhook:', error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : 'Erreur interne du serveur'
      });
    }
  }

  async getJobStatus(req: Request, res: Response): Promise<void> {
    try {
      const { executionName } = req.params;

      if (!executionName) {
        res.status(400).json({
          success: false,
          error: 'Nom de l\'ex√©cution requis'
        });
        return;
      }

      const jobStatus = await this.cloudRunJobsService.checkJobStatus(executionName);

      res.json({
        success: true,
        job: jobStatus
      });

    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du statut:', error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : 'Erreur interne du serveur'
      });
    }
  }

  async getHealth(_req: Request, res: Response): Promise<void> {
    res.json({
      success: true,
      message: 'Service vid√©o op√©rationnel',
      timestamp: new Date().toISOString()
    });
  }
} 