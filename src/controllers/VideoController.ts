import { Request, Response } from 'express';
import { VideoService, MergeRequest } from '../services/VideoService';

interface DatabaseWebhookPayload {
  type: string;
  table: string;
  record: any;
  old_record?: any;
}

export class VideoController {
  private videoService: VideoService;

  constructor() {
    this.videoService = new VideoService();
  }

  async handleDatabaseWebhook(req: Request, res: Response): Promise<void> {
    try {
      const payload: DatabaseWebhookPayload = req.body;
      const { type, table, record } = payload;

      console.log('üìä Webhook de base de donn√©es re√ßu:', {
        type,
        table,
        recordId: record?.id,
        hasPresentationVideo: !!record?.presentation_video_public_url
      });

      // V√©rifier le type d'op√©ration
      if (type !== 'INSERT' && type !== 'UPDATE') {
        console.log('‚è≠Ô∏è Type d\'op√©ration ignor√©:', type);
        res.status(200).json({
          success: true,
          message: 'Type d\'op√©ration ignor√©'
        });
        return;
      }

      // V√©rifier la table
      if (table !== 'categories' && table !== 'practices') {
        console.log('‚è≠Ô∏è Table ignor√©e:', table);
        res.status(200).json({
          success: true,
          message: 'Table ignor√©e'
        });
        return;
      }

      // V√©rifier que le record contient une vid√©o de pr√©sentation
      if (!record?.presentation_video_public_url) {
        console.log('‚è≠Ô∏è Aucune vid√©o de pr√©sentation trouv√©e dans le record');
        res.status(200).json({
          success: true,
          message: 'Aucune vid√©o de pr√©sentation trouv√©e'
        });
        return;
      }

      // R√©cup√©rer la vid√©o prefix depuis les variables d'environnement
      const prefixVideoUrl = process.env['PREFIX_VIDEO_URL'];
      if (!prefixVideoUrl) {
        console.error('‚ùå Variable d\'environnement PREFIX_VIDEO_URL non d√©finie');
        res.status(500).json({
          success: false,
          error: 'Configuration manquante: PREFIX_VIDEO_URL'
        });
        return;
      }

      // Construire l'URL de la vid√©o postfix depuis Supabase
      const postfixVideoUrl = record.presentation_video_public_url;

      console.log('üé¨ Pr√©paration de la fusion:', {
        table,
        recordId: record.id,
        prefixVideoUrl,
        postfixVideoUrl
      });

      const mergeRequest: MergeRequest = {
        prefixVideoUrl,
        postfixVideoUrl,
        quality: 'medium', // Qualit√© par d√©faut
        resolution: '1920x1080', // R√©solution par d√©faut
        fps: 30, // FPS par d√©faut
        metadata: {
          table,
          recordId: record.id,
          operation: type
        }
      };

      const result = await this.videoService.mergeVideos(mergeRequest);

      if (result.success) {
        console.log('‚úÖ Fusion d√©marr√©e avec succ√®s pour:', {
          table,
          recordId: record.id,
          jobId: result.jobId
        });

        res.json({
          success: true,
          jobId: result.jobId,
          message: 'Fusion d√©marr√©e avec succ√®s',
          metadata: {
            table,
            recordId: record.id,
            operation: type
          }
        });
      } else {
        console.error('‚ùå √âchec de la fusion pour:', {
          table,
          recordId: record.id,
          error: result.error
        });

        res.status(500).json({
          success: false,
          error: result.error,
          jobId: result.jobId,
          metadata: {
            table,
            recordId: record.id,
            operation: type
          }
        });
      }

    } catch (error) {
      console.error('‚ùå Erreur lors du traitement du webhook:', error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : 'Erreur interne du serveur'
      });
    }
  }

  async getJobStatus(req: Request, res: Response): Promise<void> {
    try {
      const { jobId } = req.params;

      if (!jobId) {
        res.status(400).json({
          success: false,
          error: 'ID du job requis'
        });
        return;
      }

      const jobStatus = await this.videoService.getJobStatus(jobId);

      if (!jobStatus) {
        res.status(404).json({
          success: false,
          error: 'Job non trouv√©'
        });
        return;
      }

      res.json({
        success: true,
        job: jobStatus
      });

    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du statut:', error);
      res.status(500).json({
        success: false,
        error: error instanceof Error ? error.message : 'Erreur interne du serveur'
      });
    }
  }

  async getHealth(_req: Request, res: Response): Promise<void> {
    res.json({
      success: true,
      message: 'Service vid√©o op√©rationnel',
      timestamp: new Date().toISOString()
    });
  }
} 