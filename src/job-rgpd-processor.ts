import { RgpdService } from './services/RgpdService';
import { EmailService } from './services/EmailService';
import { SupabaseService } from './services/SupabaseService';
import { RgpdJobPayload, RgpdJobResult } from './types/rgpd';
import dotenv from 'dotenv';
import fs from 'fs';
import path from 'path';

// Charger les variables d'environnement
dotenv.config();

async function processRgpdJob() {
  try {
    console.log('üìä D√©marrage du traitement RGPD...');

    // R√©cup√©rer les param√®tres depuis les variables d'environnement
    const rgpdRequestStr = process.env['RGPD_REQUEST'];
    const requestId = process.env['REQUEST_ID'];
    const userId = process.env['USER_ID'];
    const requestType = process.env['REQUEST_TYPE'];
    const email = process.env['EMAIL'];

    if (!rgpdRequestStr || !requestId || !userId || !requestType || !email) {
      throw new Error('Variables d\'environnement manquantes: RGPD_REQUEST, REQUEST_ID, USER_ID, REQUEST_TYPE, EMAIL');
    }

    const rgpdRequest: RgpdJobPayload = JSON.parse(rgpdRequestStr);

    console.log('üìä Param√®tres du job RGPD:', {
      requestId,
      userId,
      requestType,
      email
    });

    // Initialiser les services
    const rgpdService = new RgpdService();
    const emailService = new EmailService();
    const supabaseService = new SupabaseService();

    let result: RgpdJobResult;

    // Traiter selon le type de demande
    switch (requestType) {
      case 'data_export':
        result = await processDataExport(rgpdService, emailService, supabaseService, rgpdRequest);
        break;
      case 'data_deletion':
        result = await processDataDeletion(rgpdService, emailService, supabaseService, rgpdRequest);
        break;
      case 'data_portability':
        result = await processDataPortability(rgpdService, emailService, supabaseService, rgpdRequest);
        break;
      default:
        throw new Error(`Type de demande non support√©: ${requestType}`);
    }

    // Mettre √† jour le statut de la demande
    await updateRequestStatus(supabaseService, requestId, result);

    if (result.success) {
      console.log('‚úÖ Traitement RGPD termin√© avec succ√®s:', result);
      process.exit(0);
    } else {
      console.error('‚ùå √âchec du traitement RGPD:', result.error);
      process.exit(1);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du traitement RGPD:', error);
    process.exit(1);
  }
}

/**
 * Traite une demande d'export de donn√©es
 */
async function processDataExport(
  rgpdService: RgpdService,
  emailService: EmailService,
  supabaseService: SupabaseService,
  request: RgpdJobPayload
): Promise<RgpdJobResult> {
  try {
    console.log(`üì§ D√©but de l'export des donn√©es pour l'utilisateur: ${request.userId}`);

    // R√©cup√©rer toutes les donn√©es de l'utilisateur
    const userData = await rgpdService.exportUserData(request.userId);

    if (!userData) {
      return {
        success: false,
        requestId: request.requestId,
        userId: request.userId,
        requestType: request.requestType,
        error: 'Utilisateur non trouv√© ou donn√©es inaccessibles',
        processedAt: new Date().toISOString()
      };
    }

    // Cr√©er le fichier d'export
    const exportData = JSON.stringify(userData, null, 2);
    const fileName = `export_${request.userId}_${Date.now()}.json`;
    const filePath = path.join('/tmp', fileName);

    // √âcrire le fichier d'export
    fs.writeFileSync(filePath, exportData, 'utf8');

    // Uploader le fichier vers Supabase Storage avec s√©curit√© avanc√©e
    const downloadUrl = await uploadExportFile(supabaseService, filePath, fileName, request.userId);

    // Envoyer l'email avec le lien de t√©l√©chargement
    const htmlContent = emailService.generateDataExportEmailHtml(request.email, downloadUrl);
    const emailData = {
      to: request.email,
      subject: 'Export de vos donn√©es personnelles - HowPass',
      htmlContent: htmlContent,
      attachments: [{
        filename: fileName,
        content: Buffer.from(exportData),
        contentType: 'application/json'
      }]
    };

    const emailSent = await emailService.sendRgpdEmail(emailData);

    if (!emailSent) {
      console.warn('‚ö†Ô∏è √âchec de l\'envoi de l\'email, mais l\'export est disponible');
    }

    // Nettoyer le fichier temporaire
    fs.unlinkSync(filePath);

    return {
      success: true,
      requestId: request.requestId,
      userId: request.userId,
      requestType: request.requestType,
      downloadUrl: downloadUrl,
      processedAt: new Date().toISOString(),
      dataSize: userData.metadata.dataSize
    };

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'export des donn√©es:', error);
    return {
      success: false,
      requestId: request.requestId,
      userId: request.userId,
      requestType: request.requestType,
      error: error instanceof Error ? error.message : 'Erreur inconnue',
      processedAt: new Date().toISOString()
    };
  }
}

/**
 * Traite une demande de suppression de donn√©es
 */
async function processDataDeletion(
  rgpdService: RgpdService,
  emailService: EmailService,
  _supabaseService: SupabaseService,
  request: RgpdJobPayload
): Promise<RgpdJobResult> {
  try {
    console.log(`üóëÔ∏è D√©but de la suppression des donn√©es pour l'utilisateur: ${request.userId}`);

    // Supprimer toutes les donn√©es de l'utilisateur
    const deletionSuccess = await rgpdService.deleteUserData(request.userId);

    if (!deletionSuccess) {
      return {
        success: false,
        requestId: request.requestId,
        userId: request.userId,
        requestType: request.requestType,
        error: '√âchec de la suppression des donn√©es',
        processedAt: new Date().toISOString()
      };
    }

    // Envoyer l'email de confirmation
    const htmlContent = emailService.generateDataDeletionConfirmationEmailHtml(request.email);
    const emailData = {
      to: request.email,
      subject: 'Confirmation de suppression de vos donn√©es - HowPass',
      htmlContent: htmlContent
    };

    const emailSent = await emailService.sendRgpdEmail(emailData);

    if (!emailSent) {
      console.warn('‚ö†Ô∏è √âchec de l\'envoi de l\'email de confirmation');
    }

    return {
      success: true,
      requestId: request.requestId,
      userId: request.userId,
      requestType: request.requestType,
      processedAt: new Date().toISOString()
    };

  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression des donn√©es:', error);
    return {
      success: false,
      requestId: request.requestId,
      userId: request.userId,
      requestType: request.requestType,
      error: error instanceof Error ? error.message : 'Erreur inconnue',
      processedAt: new Date().toISOString()
    };
  }
}

/**
 * Traite une demande de portabilit√© des donn√©es
 */
async function processDataPortability(
  rgpdService: RgpdService,
  emailService: EmailService,
  supabaseService: SupabaseService,
  request: RgpdJobPayload
): Promise<RgpdJobResult> {
  try {
    console.log(`üì¶ D√©but de la portabilit√© des donn√©es pour l'utilisateur: ${request.userId}`);

    // Pour la portabilit√©, on fait la m√™me chose que l'export mais avec un format standardis√©
    const userData = await rgpdService.exportUserData(request.userId);

    if (!userData) {
      return {
        success: false,
        requestId: request.requestId,
        userId: request.userId,
        requestType: request.requestType,
        error: 'Utilisateur non trouv√© ou donn√©es inaccessibles',
        processedAt: new Date().toISOString()
      };
    }

    // Convertir au format de portabilit√© (JSON standardis√©)
    const portableData = convertToPortableFormat(userData);
    const fileName = `portability_${request.userId}_${Date.now()}.json`;
    const filePath = path.join('/tmp', fileName);

    // √âcrire le fichier de portabilit√©
    fs.writeFileSync(filePath, JSON.stringify(portableData, null, 2), 'utf8');

    // Uploader le fichier avec s√©curit√© avanc√©e
    const downloadUrl = await uploadExportFile(supabaseService, filePath, fileName, request.userId);

    // Envoyer l'email
    const htmlContent = emailService.generateDataExportEmailHtml(request.email, downloadUrl);
    const emailData = {
      to: request.email,
      subject: 'Portabilit√© de vos donn√©es - HowPass',
      htmlContent: htmlContent,
      attachments: [{
        filename: fileName,
        content: Buffer.from(JSON.stringify(portableData, null, 2)),
        contentType: 'application/json'
      }]
    };

    const emailSent = await emailService.sendRgpdEmail(emailData);

    if (!emailSent) {
      console.warn('‚ö†Ô∏è √âchec de l\'envoi de l\'email, mais la portabilit√© est disponible');
    }

    // Nettoyer le fichier temporaire
    fs.unlinkSync(filePath);

    return {
      success: true,
      requestId: request.requestId,
      userId: request.userId,
      requestType: request.requestType,
      downloadUrl: downloadUrl,
      processedAt: new Date().toISOString(),
      dataSize: userData.metadata.dataSize
    };

  } catch (error) {
    console.error('‚ùå Erreur lors de la portabilit√© des donn√©es:', error);
    return {
      success: false,
      requestId: request.requestId,
      userId: request.userId,
      requestType: request.requestType,
      error: error instanceof Error ? error.message : 'Erreur inconnue',
      processedAt: new Date().toISOString()
    };
  }
}

/**
 * Convertit les donn√©es au format de portabilit√© standard
 */
function convertToPortableFormat(userData: any): any {
  return {
    export_info: {
      format: 'GDPR Data Portability',
      version: '1.0',
      export_date: userData.metadata.exportDate,
      service: 'HowPass',
      user_id: userData.userId
    },
    personal_data: userData.personalInfo,
    conversations: userData.conversations,
    media: {
      videos: userData.videos,
      images: userData.images,
      sounds: userData.sounds
    },
    content: {
      bilans: userData.bilans
    },
    statistics: userData.metadata
  };
}

/**
 * Upload un fichier d'export vers le stockage avec s√©curit√© avanc√©e
 */
async function uploadExportFile(supabaseService: SupabaseService, filePath: string, _fileName: string, userId: string): Promise<string> {
  try {
    const fileBuffer = fs.readFileSync(filePath);
    
    // 1. Cr√©er un nom de fichier s√©curis√© avec timestamp et hash al√©atoire
    const timestamp = Date.now();
    const randomHash = Math.random().toString(36).substring(2, 15);
    const secureFileName = `export_${userId}_${timestamp}_${randomHash}.json`;
    
    // 2. Structure de dossiers s√©curis√©e par utilisateur
    const secureFilePath = `users/${userId}/exports/${secureFileName}`;
    
    // 3. Uploader le fichier
    const { error } = await supabaseService.getSupabaseClient().storage
      .from('rgpd-exports')
      .upload(secureFilePath, fileBuffer, {
        contentType: 'application/json',
        cacheControl: '3600',
        upsert: false // Emp√™cher l'√©crasement
      });

    if (error) {
      console.error('‚ùå Erreur lors de l\'upload du fichier:', error);
      throw error;
    }

    // 4. Cr√©er une URL sign√©e avec expiration (7 jours)
    const expiresIn = 7 * 24 * 60 * 60; // 7 jours en secondes
    const { data: signedUrlData, error: signedUrlError } = await supabaseService.getSupabaseClient().storage
      .from('rgpd-exports')
      .createSignedUrl(secureFilePath, expiresIn, {
        download: true
      });

    if (signedUrlError) {
      console.error('‚ùå Erreur lors de la cr√©ation de l\'URL sign√©e:', signedUrlError);
      throw signedUrlError;
    }

    // 5. Programmer la suppression automatique du fichier apr√®s 7 jours
    await scheduleFileDeletion(supabaseService, secureFilePath, 7);

    console.log(`‚úÖ Fichier s√©curis√© upload√©: ${secureFilePath}`);
    console.log(`üîó URL sign√©e g√©n√©r√©e (expire dans 7 jours)`);

    return signedUrlData.signedUrl;

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'upload s√©curis√©:', error);
    throw error;
  }
}

/**
 * Programme la suppression automatique d'un fichier
 */
async function scheduleFileDeletion(supabaseService: SupabaseService, filePath: string, daysToExpire: number): Promise<void> {
  try {
    const deletionDate = new Date();
    deletionDate.setDate(deletionDate.getDate() + daysToExpire);
    
    // Ins√©rer une t√¢che de suppression dans la base de donn√©es
    const { error } = await supabaseService.getSupabaseClient()
      .from('file_deletion_queue')
      .insert({
        file_path: filePath,
        deletion_date: deletionDate.toISOString(),
        status: 'pending',
        created_at: new Date().toISOString()
      });

    if (error) {
      console.warn('‚ö†Ô∏è Impossible de programmer la suppression automatique:', error);
    } else {
      console.log(`üìÖ Suppression automatique programm√©e pour ${filePath} le ${deletionDate.toISOString()}`);
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Erreur lors de la programmation de la suppression:', error);
  }
}

/**
 * Met √† jour le statut de la demande RGPD
 */
async function updateRequestStatus(supabaseService: SupabaseService, requestId: string, result: RgpdJobResult): Promise<void> {
  try {
    const updateData: any = {
      status: result.success ? 'completed' : 'failed',
      processed_at: result.processedAt
    };

    if (result.success) {
      if (result.downloadUrl) {
        updateData.download_url = result.downloadUrl;
      }
    }
    // Note: Les erreurs sont logg√©es dans les logs, pas stock√©es en base

    const { error } = await supabaseService.getSupabaseClient()
      .from('gprd_requests')
      .update(updateData)
      .eq('id', requestId);

    if (error) {
      console.error('‚ùå Erreur lors de la mise √† jour du statut:', error);
    } else {
      console.log('‚úÖ Statut de la demande mis √† jour:', updateData);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour du statut:', error);
  }
}

// D√©marrer le traitement si ce fichier est ex√©cut√© directement
if (require.main === module) {
  processRgpdJob();
}
