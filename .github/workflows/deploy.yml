name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: europe-west1
  SERVICE_NAME: howpass-services
  IMAGE_NAME: europe-west1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/howpass-services/app

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Authenticate Docker to Artifact Registry (manual login)
      run: |
        echo '${{ secrets.GCP_SA_KEY }}' > ${HOME}/gcp-key.json
        gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json
        gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
        ACCESS_TOKEN=$(gcloud auth print-access-token)
        echo $ACCESS_TOKEN | docker login -u oauth2accesstoken --password-stdin https://europe-west1-docker.pkg.dev

    - name: Build and push Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.IMAGE_NAME }}:latest

    - name: Deploy to Cloud Run
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ${{ env.SERVICE_NAME }}
        image: ${{ env.IMAGE_NAME }}:${{ github.sha }}
        region: ${{ env.REGION }}
        flags: |
          --allow-unauthenticated
          --execution-environment=gen2
          --network=default
          --subnet=default
          --vpc-egress=private-ranges-only
          --memory=2Gi
          --cpu=2
          --timeout=900
          --concurrency=10
          --max-instances=10
          --set-env-vars=NODE_ENV=production
          --set-env-vars=SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          --set-env-vars=SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }}
          --set-env-vars=FFMPEG_TIMEOUT=300000
          --set-env-vars=FFMPEG_THREADS=4
          --set-env-vars=CORS_ORIGIN=${{ secrets.CORS_ORIGIN }}
          --set-env-vars=GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
          --set-env-vars=GCP_LOCATION=europe-west1
          --set-env-vars=GCP_SERVICE_ACCOUNT_EMAIL=${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          --set-env-vars=GCP_JOB_NAME=video-processing-job
          --set-env-vars=GCP_TASKS_QUEUE_NAME=ia-processing-queue
          --set-env-vars=IA_PROCESSING_SERVICE_URL=${{ secrets.IA_PROCESSING_SERVICE_URL }}
          --set-env-vars=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

    - name: Redirect traffic to new revision
      run: |
        echo "🔄 Redirection du trafic vers la nouvelle révision..."
        
        # Récupérer l'URL du service
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
        
        echo "📍 Service URL: $SERVICE_URL"
        
        # Rediriger 100% du trafic vers la dernière révision
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --to-latest
        
        echo "✅ Trafic redirigé vers la dernière révision avec succès"
        
        # Vérifier la configuration du trafic
        echo "📊 Configuration actuelle du trafic:"
        gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.traffic[].percent,status.traffic[].revisionName)' \
          --flatten='status.traffic[]'

    - name: Create Cloud Run Job (Video Processing Only)
      run: |
        echo "📋 Création du Cloud Run Job pour le traitement vidéo..."
        
        if gcloud run jobs describe video-processing-job --region=${{ env.REGION }} --project=${{ secrets.GCP_PROJECT_ID }} 2>/dev/null; then
          echo "✅ Job existant trouvé, mise à jour..."
          gcloud run jobs update video-processing-job \
            --region=${{ env.REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --image=${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --execution-environment=gen2 \
            --network=default \
            --subnet=default \
            --vpc-egress=private-ranges-only \
            --memory=2Gi \
            --cpu=2 \
            --task-timeout=3600 \
            --max-retries=3 \
            --command="npm" \
            --args="run,job" \
            --set-env-vars=NODE_ENV=production \
            --set-env-vars=SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
            --set-env-vars=SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }} \
            --set-env-vars=FFMPEG_TIMEOUT=300000 \
            --set-env-vars=FFMPEG_THREADS=4 \
            --set-env-vars=GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }} \
            --set-env-vars=GCP_LOCATION=europe-west1 \
            --set-env-vars=GCP_JOB_NAME=video-processing-job \
            --set-env-vars=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        else
          echo "🆕 Création d'un nouveau job..."
          gcloud run jobs create video-processing-job \
            --region=${{ env.REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --image=${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --execution-environment=gen2 \
            --network=default \
            --subnet=default \
            --vpc-egress=private-ranges-only \
            --memory=2Gi \
            --cpu=2 \
            --task-timeout=3600 \
            --max-retries=3 \
            --command="npm" \
            --args="run,job" \
            --set-env-vars=NODE_ENV=production \
            --set-env-vars=SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
            --set-env-vars=SUPABASE_SERVICE_KEY=${{ secrets.SUPABASE_SERVICE_KEY }} \
            --set-env-vars=FFMPEG_TIMEOUT=300000 \
            --set-env-vars=FFMPEG_THREADS=4 \
            --set-env-vars=GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }} \
            --set-env-vars=GCP_LOCATION=europe-west1 \
            --set-env-vars=GCP_JOB_NAME=video-processing-job \
            --set-env-vars=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        fi
        
        echo "✅ Cloud Run Job configuré avec succès (traitement vidéo uniquement)"

    - name: Create Google Cloud Tasks Queues
      run: |
        echo "🚀 Configuration des Google Cloud Tasks pour le traitement IA..."
        
        # Créer la queue principale
        if gcloud tasks queues describe ia-processing-queue --location=${{ env.REGION }} --project=${{ secrets.GCP_PROJECT_ID }} 2>/dev/null; then
          echo "✅ Queue principale existante, mise à jour..."
          gcloud tasks queues update ia-processing-queue \
            --location=${{ env.REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --max-concurrent-dispatches=50 \
            --max-dispatches-per-second=100 \
            --max-attempts=3 \
            --min-backoff=10s \
            --max-backoff=3600s \
            --max-doublings=5
        else
          echo "🆕 Création de la queue principale..."
          gcloud tasks queues create ia-processing-queue \
            --location=${{ env.REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --max-concurrent-dispatches=50 \
            --max-dispatches-per-second=100 \
            --max-attempts=3 \
            --min-backoff=10s \
            --max-backoff=3600s \
            --max-doublings=5
        fi
        
        # Créer la queue haute priorité
        if gcloud tasks queues describe ia-processing-high-priority --location=${{ env.REGION }} --project=${{ secrets.GCP_PROJECT_ID }} 2>/dev/null; then
          echo "✅ Queue haute priorité existante, mise à jour..."
          gcloud tasks queues update ia-processing-high-priority \
            --location=${{ env.REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --max-concurrent-dispatches=20 \
            --max-dispatches-per-second=50 \
            --max-attempts=3 \
            --min-backoff=5s \
            --max-backoff=300s \
            --max-doublings=3
        else
          echo "🆕 Création de la queue haute priorité..."
          gcloud tasks queues create ia-processing-high-priority \
            --location=${{ env.REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --max-concurrent-dispatches=20 \
            --max-dispatches-per-second=50 \
            --max-attempts=3 \
            --min-backoff=5s \
            --max-backoff=300s \
            --max-doublings=3
        fi
        
        # Créer la queue moyenne priorité
        if gcloud tasks queues describe ia-processing-medium-priority --location=${{ env.REGION }} --project=${{ secrets.GCP_PROJECT_ID }} 2>/dev/null; then
          echo "✅ Queue moyenne priorité existante, mise à jour..."
          gcloud tasks queues update ia-processing-medium-priority \
            --location=${{ env.REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --max-concurrent-dispatches=30 \
            --max-dispatches-per-second=75 \
            --max-attempts=3 \
            --min-backoff=10s \
            --max-backoff=600s \
            --max-doublings=4
        else
          echo "🆕 Création de la queue moyenne priorité..."
          gcloud tasks queues create ia-processing-medium-priority \
            --location=${{ env.REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --max-concurrent-dispatches=30 \
            --max-dispatches-per-second=75 \
            --max-attempts=3 \
            --min-backoff=10s \
            --max-backoff=600s \
            --max-doublings=4
        fi
        
        # Créer la queue basse priorité
        if gcloud tasks queues describe ia-processing-low-priority --location=${{ env.REGION }} --project=${{ secrets.GCP_PROJECT_ID }} 2>/dev/null; then
          echo "✅ Queue basse priorité existante, mise à jour..."
          gcloud tasks queues update ia-processing-low-priority \
            --location=${{ env.REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --max-concurrent-dispatches=40 \
            --max-dispatches-per-second=60 \
            --max-attempts=3 \
            --min-backoff=30s \
            --max-backoff=1800s \
            --max-doublings=5
        else
          echo "🆕 Création de la queue basse priorité..."
          gcloud tasks queues create ia-processing-low-priority \
            --location=${{ env.REGION }} \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --max-concurrent-dispatches=40 \
            --max-dispatches-per-second=60 \
            --max-attempts=3 \
            --min-backoff=30s \
            --max-backoff=1800s \
            --max-doublings=5
        fi
        
        echo "✅ Google Cloud Tasks configurées avec succès"
        echo "💡 Queue principale: ia-processing-queue (50 tâches simultanées)"
        echo "💡 Queue haute priorité: ia-processing-high-priority (20 tâches simultanées)"
        echo "💡 Queue moyenne priorité: ia-processing-medium-priority (30 tâches simultanées)"
        echo "💡 Queue basse priorité: ia-processing-low-priority (40 tâches simultanées)"
        echo "💡 Les tâches sont automatiquement dispatchées vers le service Cloud Run"

    - name: Show service URL
      run: |
        gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)'
